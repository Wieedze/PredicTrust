{
  "address": "0x774C4fF180d021e1c33b1317Ad4b4224c59B4127",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ttustPriceOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum PredictionFactoryNative.PredictionType",
          "name": "predictionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "question",
          "type": "string"
        }
      ],
      "name": "TTrustMarketCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PredictionFactoryNative.PredictionType",
          "name": "_predictionType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_targetValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_predictionQuestion",
          "type": "string"
        }
      ],
      "name": "createTTrustMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "marketAddress",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getActiveMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "markets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setCreationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setTTrustPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ttustPriceOracle",
      "outputs": [
        {
          "internalType": "contract TTrustPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x133e313085afc3b72fcee9319ab4b6c85903eed4fcbac2c4d6c63c3126086830",
  "receipt": {
    "to": null,
    "from": "0x0B940A81271aD090AbD2C18d1a5873e5cb93D42a",
    "contractAddress": "0x774C4fF180d021e1c33b1317Ad4b4224c59B4127",
    "transactionIndex": 1,
    "gasUsed": "1757503",
    "logsBloom": "0x
    "blockHash": "0x02450aeb865cfbad0ead0db1877f064f3854335aa2348bc6a3ac379847e39067",
    "transactionHash": "0x133e313085afc3b72fcee9319ab4b6c85903eed4fcbac2c4d6c63c3126086830",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 2823310,
        "transactionHash": "0x133e313085afc3b72fcee9319ab4b6c85903eed4fcbac2c4d6c63c3126086830",
        "address": "0x774C4fF180d021e1c33b1317Ad4b4224c59B4127",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000b940a81271ad090abd2c18d1a5873e5cb93d42a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x02450aeb865cfbad0ead0db1877f064f3854335aa2348bc6a3ac379847e39067"
      }
    ],
    "blockNumber": 2823310,
    "cumulativeGasUsed": "1757503",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0B940A81271aD090AbD2C18d1a5873e5cb93D42a",
    "0x9c8396223B7349fb16410D95fBBb5D5E4425Ed45"
  ],
  "numDeployments": 1,
  "solcInputHash": "825651568bae5a757fdf525df07e3032",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ttustPriceOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum PredictionFactoryNative.PredictionType\",\"name\":\"predictionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"}],\"name\":\"TTrustMarketCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PredictionFactoryNative.PredictionType\",\"name\":\"_predictionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_targetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_predictionQuestion\",\"type\":\"string\"}],\"name\":\"createTTrustMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getActiveMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setCreationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setTTrustPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ttustPriceOracle\",\"outputs\":[{\"internalType\":\"contract TTrustPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PredictionFactoryNative\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createTTrustMarket(uint8,uint256,uint256,string,string)\":{\"notice\":\"Create a new TTrust prediction market using native TTRUST\"},\"getActiveMarkets(uint256,uint256)\":{\"notice\":\"Get active markets (simple pagination)\"},\"getMarketCount()\":{\"notice\":\"Get market count\"},\"setCreationFee(uint256)\":{\"notice\":\"Update fees\"},\"setTTrustPriceOracle(address)\":{\"notice\":\"Set oracle address\"},\"withdrawFees()\":{\"notice\":\"Withdraw collected fees (native TTRUST)\"}},\"notice\":\"Factory contract for creating TTrust-based prediction markets using native TTRUST token\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PredictionFactoryNative.sol\":\"PredictionFactoryNative\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/PredictionFactoryNative.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { SimpleNativeMarket } from \\\"./SimpleNativeMarket.sol\\\";\\nimport { TTrustPriceOracle } from \\\"./TTrustPriceOracle.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title PredictionFactoryNative\\n * @notice Factory contract for creating TTrust-based prediction markets using native TTRUST token\\n */\\ncontract PredictionFactoryNative is Ownable {\\n    \\n    enum PredictionType {\\n        MARKET_CAP_ABOVE,\\n        MARKET_CAP_BELOW,\\n        PRICE_ABOVE,\\n        PRICE_BELOW\\n    }\\n    \\n    // Oracle\\n    TTrustPriceOracle public ttustPriceOracle;\\n    \\n    // Market registry\\n    address[] public allMarkets;\\n    uint256 public marketCount;\\n    \\n    // Settings (in native TTRUST wei)\\n    uint256 public minimumLiquidity = 1e17; // 0.1 TTRUST minimum\\n    uint256 public creationFee = 1e15; // 0.001 TTRUST creation fee\\n    \\n    event TTrustMarketCreated(\\n        address indexed marketAddress,\\n        address indexed creator,\\n        PredictionType indexed predictionType,\\n        uint256 targetValue,\\n        uint256 deadline,\\n        string title,\\n        string question\\n    );\\n    \\n    modifier validLiquidity(uint256 _liquidity) {\\n        require(_liquidity >= minimumLiquidity, \\\"Insufficient liquidity\\\");\\n        _;\\n    }\\n    \\n    modifier validDeadline(uint256 _deadline) {\\n        require(_deadline > block.timestamp, \\\"Invalid deadline\\\");\\n        _;\\n    }\\n    \\n    constructor(\\n        address _owner,\\n        address _ttustPriceOracle\\n    ) Ownable(_owner) {\\n        if (_ttustPriceOracle != address(0)) {\\n            ttustPriceOracle = TTrustPriceOracle(_ttustPriceOracle);\\n        }\\n    }\\n    \\n    /**\\n     * @notice Create a new TTrust prediction market using native TTRUST\\n     */\\n    function createTTrustMarket(\\n        PredictionType _predictionType,\\n        uint256 _targetValue,\\n        uint256 _deadline,\\n        string memory _title,\\n        string memory _predictionQuestion\\n    )\\n        external\\n        payable\\n        validLiquidity(msg.value)\\n        validDeadline(_deadline)\\n        returns (address marketAddress)\\n    {\\n        require(address(ttustPriceOracle) != address(0), \\\"Oracle not set\\\");\\n        require(_targetValue > 0, \\\"Invalid target value\\\");\\n        require(msg.value >= minimumLiquidity + creationFee, \\\"Insufficient TTRUST sent\\\");\\n        \\n        // Calculate actual liquidity (subtract creation fee)\\n        uint256 actualLiquidity = msg.value - creationFee;\\n        \\n        // Create the market with native TTRUST\\n        SimpleNativeMarket.PredictionType marketPredictionType = SimpleNativeMarket.PredictionType(uint8(_predictionType));\\n        \\n        SimpleNativeMarket market = new SimpleNativeMarket{value: actualLiquidity}(\\n            msg.sender,\\n            marketPredictionType,\\n            _targetValue,\\n            _deadline,\\n            _title,\\n            _predictionQuestion\\n        );\\n        \\n        marketAddress = address(market);\\n        \\n        // Register market\\n        allMarkets.push(marketAddress);\\n        marketCount++;\\n        \\n        emit TTrustMarketCreated(\\n            marketAddress,\\n            msg.sender,\\n            _predictionType,\\n            _targetValue,\\n            _deadline,\\n            _title,\\n            _predictionQuestion\\n        );\\n    }\\n    \\n    /**\\n     * @notice Get market count\\n     */\\n    function getMarketCount() external view returns (uint256) {\\n        return marketCount;\\n    }\\n    \\n    /**\\n     * @notice Get active markets (simple pagination)\\n     */\\n    function getActiveMarkets(uint256 _offset, uint256 _limit) \\n        external \\n        view \\n        returns (address[] memory markets, uint256 total) \\n    {\\n        total = marketCount;\\n        \\n        if (_offset >= total) {\\n            return (new address[](0), total);\\n        }\\n        \\n        uint256 end = _offset + _limit;\\n        if (end > total) {\\n            end = total;\\n        }\\n        \\n        markets = new address[](end - _offset);\\n        for (uint256 i = _offset; i < end; i++) {\\n            markets[i - _offset] = allMarkets[i];\\n        }\\n    }\\n    \\n    /**\\n     * @notice Set oracle address\\n     */\\n    function setTTrustPriceOracle(address _oracle) external onlyOwner {\\n        ttustPriceOracle = TTrustPriceOracle(_oracle);\\n    }\\n    \\n    /**\\n     * @notice Update fees\\n     */\\n    function setCreationFee(uint256 _fee) external onlyOwner {\\n        creationFee = _fee;\\n    }\\n    \\n    /**\\n     * @notice Withdraw collected fees (native TTRUST)\\n     */\\n    function withdrawFees() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n    \\n    /**\\n     * @notice Emergency function to receive TTRUST\\n     */\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x4b84bde4f39f029095a78606a1825971be3ec723cb2a4e985f0e2a001ec074cc\",\"license\":\"MIT\"},\"contracts/SimpleNativeMarket.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title SimpleNativeMarket\\n * @notice Simple prediction market using native TTRUST\\n */\\ncontract SimpleNativeMarket is Ownable {\\n    \\n    enum PredictionType {\\n        MARKET_CAP_ABOVE,\\n        MARKET_CAP_BELOW,\\n        PRICE_ABOVE,\\n        PRICE_BELOW\\n    }\\n    \\n    // Market details\\n    PredictionType public predictionType;\\n    uint256 public targetValue;\\n    uint256 public deadline;\\n    string public title;\\n    string public predictionQuestion;\\n    address public creator;\\n    \\n    // Market state\\n    uint256 public totalLiquidity;\\n    uint256 public yesPool;\\n    uint256 public noPool;\\n    bool public isResolved;\\n    bool public targetReached;\\n    \\n    // User positions (in TTRUST wei)\\n    mapping(address => uint256) public yesPositions;\\n    mapping(address => uint256) public noPositions;\\n    \\n    // Events\\n    event YesPurchased(address indexed buyer, uint256 amount, uint256 ttrust);\\n    event NoPurchased(address indexed buyer, uint256 amount, uint256 ttrust);\\n    event MarketResolved(bool targetReached);\\n    event Redeemed(address indexed user, uint256 ttrust);\\n    \\n    constructor(\\n        address _creator,\\n        PredictionType _predictionType,\\n        uint256 _targetValue,\\n        uint256 _deadline,\\n        string memory _title,\\n        string memory _predictionQuestion\\n    ) payable Ownable(_creator) {\\n        creator = _creator;\\n        predictionType = _predictionType;\\n        targetValue = _targetValue;\\n        deadline = _deadline;\\n        title = _title;\\n        predictionQuestion = _predictionQuestion;\\n        \\n        // Initialize pools with sent TTRUST\\n        totalLiquidity = msg.value;\\n        yesPool = msg.value / 2;  // 50/50 initial split\\n        noPool = msg.value / 2;\\n        \\n        require(msg.value > 0, \\\"Must provide initial liquidity\\\");\\n    }\\n    \\n    /**\\n     * @notice Buy YES tokens with native TTRUST\\n     */\\n    function buyYes() external payable {\\n        require(msg.value > 0, \\\"Must send TTRUST\\\");\\n        require(block.timestamp < deadline, \\\"Market expired\\\");\\n        require(!isResolved, \\\"Market resolved\\\");\\n        \\n        uint256 yesToBuy = calculateYesToBuy(msg.value);\\n        require(yesToBuy > 0, \\\"Invalid purchase amount\\\");\\n        \\n        yesPositions[msg.sender] += yesToBuy;\\n        yesPool += msg.value;\\n        \\n        emit YesPurchased(msg.sender, yesToBuy, msg.value);\\n    }\\n    \\n    /**\\n     * @notice Buy NO tokens with native TTRUST  \\n     */\\n    function buyNo() external payable {\\n        require(msg.value > 0, \\\"Must send TTRUST\\\");\\n        require(block.timestamp < deadline, \\\"Market expired\\\");\\n        require(!isResolved, \\\"Market resolved\\\");\\n        \\n        uint256 noToBuy = calculateNoToBuy(msg.value);\\n        require(noToBuy > 0, \\\"Invalid purchase amount\\\");\\n        \\n        noPositions[msg.sender] += noToBuy;\\n        noPool += msg.value;\\n        \\n        emit NoPurchased(msg.sender, noToBuy, msg.value);\\n    }\\n    \\n    /**\\n     * @notice Simple AMM pricing for YES tokens\\n     */\\n    function calculateYesToBuy(uint256 ttrust) public view returns (uint256) {\\n        if (yesPool == 0) return ttrust;\\n        // Simple formula: more expensive as pool grows\\n        return (ttrust * 1e18) / (1e18 + yesPool * 1e18 / (yesPool + noPool));\\n    }\\n    \\n    /**\\n     * @notice Simple AMM pricing for NO tokens  \\n     */\\n    function calculateNoToBuy(uint256 ttrust) public view returns (uint256) {\\n        if (noPool == 0) return ttrust;\\n        // Simple formula: more expensive as pool grows\\n        return (ttrust * 1e18) / (1e18 + noPool * 1e18 / (yesPool + noPool));\\n    }\\n    \\n    /**\\n     * @notice Get current YES price (TTRUST per YES token)\\n     */\\n    function getYesPrice() external view returns (uint256) {\\n        if (yesPool == 0) return 1e18; // 1 TTRUST\\n        return (yesPool * 1e18) / (yesPool + noPool);\\n    }\\n    \\n    /**\\n     * @notice Get current NO price (TTRUST per NO token)\\n     */\\n    function getNoPrice() external view returns (uint256) {\\n        if (noPool == 0) return 1e18; // 1 TTRUST  \\n        return (noPool * 1e18) / (yesPool + noPool);\\n    }\\n    \\n    /**\\n     * @notice Resolve market (only owner/oracle)\\n     */\\n    function resolveMarket(bool _targetReached) external onlyOwner {\\n        require(block.timestamp >= deadline, \\\"Market not expired\\\");\\n        require(!isResolved, \\\"Already resolved\\\");\\n        \\n        isResolved = true;\\n        targetReached = _targetReached;\\n        \\n        emit MarketResolved(_targetReached);\\n    }\\n    \\n    /**\\n     * @notice Redeem winning positions\\n     */\\n    function redeem() external {\\n        require(isResolved, \\\"Market not resolved\\\");\\n        \\n        uint256 payout = 0;\\n        \\n        if (targetReached && yesPositions[msg.sender] > 0) {\\n            // YES won - calculate payout from total pool\\n            payout = (yesPositions[msg.sender] * (yesPool + noPool)) / getTotalYesTokens();\\n            yesPositions[msg.sender] = 0;\\n        } else if (!targetReached && noPositions[msg.sender] > 0) {\\n            // NO won - calculate payout from total pool\\n            payout = (noPositions[msg.sender] * (yesPool + noPool)) / getTotalNoTokens();\\n            noPositions[msg.sender] = 0;\\n        }\\n        \\n        require(payout > 0, \\\"No payout available\\\");\\n        \\n        payable(msg.sender).transfer(payout);\\n        emit Redeemed(msg.sender, payout);\\n    }\\n    \\n    /**\\n     * @notice Get total YES tokens issued (placeholder)\\n     */\\n    function getTotalYesTokens() public view returns (uint256) {\\n        return yesPool; // Simplified for now\\n    }\\n    \\n    /**\\n     * @notice Get total NO tokens issued (placeholder)  \\n     */\\n    function getTotalNoTokens() public view returns (uint256) {\\n        return noPool; // Simplified for now\\n    }\\n    \\n    /**\\n     * @notice Get market info\\n     */\\n    function getMarketInfo() external view returns (\\n        string memory,\\n        string memory, \\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        bool,\\n        bool\\n    ) {\\n        return (\\n            title,\\n            predictionQuestion,\\n            targetValue,\\n            deadline, \\n            yesPool,\\n            noPool,\\n            isResolved,\\n            targetReached\\n        );\\n    }\\n    \\n    /**\\n     * @notice Emergency receive function\\n     */\\n    receive() external payable {\\n        // Allow contract to receive TTRUST\\n    }\\n}\",\"keccak256\":\"0x568a35ff2f76b28d64d6e1161eaf265a4b602dfc23a7b6ab37755548cb235fc9\",\"license\":\"MIT\"},\"contracts/TTrustPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { AggregatorV3Interface } from \\\"./interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title TTrustPriceOracle\\n * @notice Oracle contract to get TTrust price data from multiple sources\\n * @dev Can integrate with DEX prices, external oracles, or manual price feeds\\n */\\ncontract TTrustPriceOracle is Ownable {\\n    \\n    /////////////////\\n    /// Errors //////\\n    /////////////////\\n    \\n    error TTrustPriceOracle__PriceStale();\\n    error TTrustPriceOracle__InvalidPrice();\\n    error TTrustPriceOracle__OnlyTrustedUpdater();\\n    error TTrustPriceOracle__InvalidDEXAddress();\\n    \\n    //////////////////////////\\n    /// State Variables //////\\n    //////////////////////////\\n    \\n    struct PriceData {\\n        uint256 price;          // Price in USD (18 decimals)\\n        uint256 timestamp;      // Last update timestamp\\n        uint256 marketCap;      // Market cap in USD (18 decimals)\\n        bool isValid;           // Is this price valid\\n    }\\n    \\n    PriceData public currentPrice;\\n    \\n    uint256 public constant PRICE_STALENESS_THRESHOLD = 1 hours;\\n    uint256 public constant PRECISION = 1e18;\\n    \\n    // Trusted price updaters (can be set to external oracles or bots)\\n    mapping(address => bool) public trustedUpdaters;\\n    \\n    // DEX contract address for getting prices from liquidity pools\\n    address public dexRouter;\\n    address public ttustIntuitPair;\\n    \\n    // Backup price feeds (Chainlink style)\\n    AggregatorV3Interface public backupPriceFeed;\\n    \\n    /////////////////////////\\n    /// Events //////\\n    /////////////////////////\\n    \\n    event PriceUpdated(uint256 indexed price, uint256 indexed marketCap, uint256 timestamp, address updater);\\n    event TrustedUpdaterSet(address indexed updater, bool trusted);\\n    event DEXRouterSet(address indexed router, address indexed pair);\\n    event BackupPriceFeedSet(address indexed priceFeed);\\n    \\n    /////////////////\\n    /// Modifiers ///\\n    /////////////////\\n    \\n    modifier onlyTrustedUpdater() {\\n        if (!trustedUpdaters[msg.sender] && msg.sender != owner()) {\\n            revert TTrustPriceOracle__OnlyTrustedUpdater();\\n        }\\n        _;\\n    }\\n    \\n    //////////////////\\n    ////Constructor///\\n    //////////////////\\n    \\n    constructor(\\n        address _owner,\\n        uint256 _initialPrice,\\n        uint256 _initialMarketCap\\n    ) Ownable(_owner) {\\n        // Set initial price data\\n        currentPrice = PriceData({\\n            price: _initialPrice,\\n            timestamp: block.timestamp,\\n            marketCap: _initialMarketCap,\\n            isValid: true\\n        });\\n        \\n        // Owner is automatically a trusted updater\\n        trustedUpdaters[_owner] = true;\\n        \\n        emit PriceUpdated(_initialPrice, _initialMarketCap, block.timestamp, msg.sender);\\n    }\\n    \\n    /////////////////\\n    /// Functions ///\\n    /////////////////\\n    \\n    /**\\n     * @notice Update TTrust price manually (for trusted updaters)\\n     * @param _price New price in USD (18 decimals)\\n     * @param _marketCap New market cap in USD (18 decimals)\\n     */\\n    function updatePrice(uint256 _price, uint256 _marketCap) \\n        external \\n        onlyTrustedUpdater \\n    {\\n        if (_price == 0) {\\n            revert TTrustPriceOracle__InvalidPrice();\\n        }\\n        \\n        currentPrice = PriceData({\\n            price: _price,\\n            timestamp: block.timestamp,\\n            marketCap: _marketCap,\\n            isValid: true\\n        });\\n        \\n        emit PriceUpdated(_price, _marketCap, block.timestamp, msg.sender);\\n    }\\n    \\n    /**\\n     * @notice Get current TTrust price\\n     * @return price Current price in USD (18 decimals)\\n     * @return timestamp Last update timestamp\\n     */\\n    function getPrice() external view returns (uint256 price, uint256 timestamp) {\\n        if (!isPriceValid()) {\\n            revert TTrustPriceOracle__PriceStale();\\n        }\\n        \\n        return (currentPrice.price, currentPrice.timestamp);\\n    }\\n    \\n    /**\\n     * @notice Get current TTrust market cap\\n     * @return marketCap Current market cap in USD (18 decimals)\\n     * @return timestamp Last update timestamp\\n     */\\n    function getMarketCap() external view returns (uint256 marketCap, uint256 timestamp) {\\n        if (!isPriceValid()) {\\n            revert TTrustPriceOracle__PriceStale();\\n        }\\n        \\n        return (currentPrice.marketCap, currentPrice.timestamp);\\n    }\\n    \\n    /**\\n     * @notice Check if current price is valid (not stale)\\n     * @return bool True if price is valid\\n     */\\n    function isPriceValid() public view returns (bool) {\\n        return currentPrice.isValid && \\n               (block.timestamp - currentPrice.timestamp) <= PRICE_STALENESS_THRESHOLD;\\n    }\\n    \\n    /**\\n     * @notice Get price from DEX (if configured)\\n     * @return price Price from DEX\\n     */\\n    function getPriceFromDEX() external view returns (uint256 price) {\\n        // This would integrate with the existing DEX to get TTrust price\\n        // Implementation depends on the DEX structure\\n        if (dexRouter == address(0)) {\\n            return 0;\\n        }\\n        \\n        // TODO: Implement actual DEX price fetching\\n        // For now, return current price as fallback\\n        return currentPrice.price;\\n    }\\n    \\n    /////////////////////////\\n    /// Admin Functions ////\\n    /////////////////////////\\n    \\n    /**\\n     * @notice Set trusted updater status\\n     * @param _updater Address to set trust status for\\n     * @param _trusted Whether this address is trusted\\n     */\\n    function setTrustedUpdater(address _updater, bool _trusted) external onlyOwner {\\n        trustedUpdaters[_updater] = _trusted;\\n        emit TrustedUpdaterSet(_updater, _trusted);\\n    }\\n    \\n    /**\\n     * @notice Set DEX router and pair addresses for price fetching\\n     * @param _router DEX router address\\n     * @param _pair TTrust/INTUIT pair address\\n     */\\n    function setDEXAddresses(address _router, address _pair) external onlyOwner {\\n        if (_router == address(0) || _pair == address(0)) {\\n            revert TTrustPriceOracle__InvalidDEXAddress();\\n        }\\n        \\n        dexRouter = _router;\\n        ttustIntuitPair = _pair;\\n        \\n        emit DEXRouterSet(_router, _pair);\\n    }\\n    \\n    /**\\n     * @notice Set backup price feed (Chainlink style)\\n     * @param _priceFeed Chainlink price feed address\\n     */\\n    function setBackupPriceFeed(address _priceFeed) external onlyOwner {\\n        backupPriceFeed = AggregatorV3Interface(_priceFeed);\\n        emit BackupPriceFeedSet(_priceFeed);\\n    }\\n    \\n    /**\\n     * @notice Emergency function to invalidate current price\\n     */\\n    function invalidatePrice() external onlyOwner {\\n        currentPrice.isValid = false;\\n    }\\n    \\n    /////////////////////////\\n    /// Getter Functions ///\\n    /////////////////////////\\n    \\n    /**\\n     * @notice Get all price data\\n     */\\n    function getAllPriceData() \\n        external \\n        view \\n        returns (\\n            uint256 price,\\n            uint256 timestamp,\\n            uint256 marketCap,\\n            bool isValid,\\n            bool isStale\\n        ) \\n    {\\n        price = currentPrice.price;\\n        timestamp = currentPrice.timestamp;\\n        marketCap = currentPrice.marketCap;\\n        isValid = currentPrice.isValid;\\n        isStale = !isPriceValid();\\n    }\\n}\",\"keccak256\":\"0x6b0d0b1ef45606fdea83c76766cdbc1e28a586bc34b65b199c8a51f0681b1e32\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\",\"keccak256\":\"0x096ce3725b0b186b8159bec9b640c0eaec864a9f0bbe8b8d07d05db69afa57c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100f857601f611e4838819003918201601f19168301916001600160401b038311848410176100fd5780849260409485528339810103126100f857610052602061004b83610113565b9201610113565b906001600160a01b039081169081156100df576000549260018060a01b03199280848616176000558260405195167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a367016345785d8a000060045566038d7ea4c680006005551690816100d0575b611d2083816101288239f35b600154161760015538806100c4565b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100f85756fe6040608081526004908136101562000022575b505036156200002057600080fd5b005b600091823560e01c9081631e1ab40f1462000426578163476343ee14620003d057816352d84d1e146200038a578163715018a614620003295781638da5cb5b14620002ff578163a04ddcad146200028c578163b56cf011146200026c578163b7d862251462000246578163c801892c146200021b578163dce0b4e414620001fa578163e3e10caa14620001b0578163ec979082146200018f578163f2fde38b14620000f6575063fd69f3c203620000125734620000f25781600319360112620000f2576020906003549051908152f35b5080fd5b919050346200018b5760203660031901126200018b576001600160a01b0382358181169391929084900362000187576200012f62000835565b83156200017157505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b505034620000f25781600319360112620000f2576020906003549051908152f35b839034620000f2576020366003190112620000f257356001600160a01b03811690819003620000f257620001e362000835565b600180546001600160a01b03191691909117905580f35b505034620000f25781600319360112620000f2576020906005549051908152f35b505034620000f25781600319360112620000f25760015490516001600160a01b039091168152602090f35b839034620000f2576020366003190112620000f2576200026562000835565b3560055580f35b9050346200018b57826003193601126200018b5760209250549051908152f35b9050346200018b57816003193601126200018b57620002b1839160243590356200091f565b8391935192828401928452845180935260608401926020809601915b818110620002e15750505082938301520390f35b82516001600160a01b031685529386019391860191600101620002cd565b505034620000f25781600319360112620000f257905490516001600160a01b039091168152602090f35b833462000387578060031936011262000387576200034662000835565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b9050346200018b5760203660031901126200018b573591600254831015620003875750620003ba60209262000803565b905491519160018060a01b039160031b1c168152f35b505034620000f25781600319360112620000f257620003ee62000835565b8180808060018060a01b0381541647908282156200041c575bf11562000412575080f35b51903d90823e3d90fd5b506108fc62000407565b838360a0366003190112620000f2578235838110156200018b57604480359460649160248035926001600160401b03929185358481116200076757620004709036908401620007a7565b9360843581811162000763576200048b9036908501620007a7565b968354908134106200072c57428d1115620006fb576001546001600160a01b039690871615620006c95788156200069157620004cb600554809462000862565b341062000655575050620004e0903462000886565b90620004ec8962000894565b60ff891690620004fc8262000894565b8a51916112be808401928311848410176200064357918e8a8e6200056394879662000a2d8839338552620005308162000894565b6020850152830152606082015260c060808201526200055360c082018a620008b5565b9060a08183039101528a620008b5565b0391f08015620006395783169860025492600160401b84101562000629575050509262000620620006107f46fad52d6904922815eb238694b5546e7472084f62d8b55a107c98953a666b139460209b94620005c68860018e9a0160025562000803565b819291549060031b918a831b921b1916179055620005e6600354620008f7565b600355620005f48962000894565b895194859485528c85015260808a8501526080840190620008b5565b82810360608401523396620008b5565b0390a451908152f35b634e487b7160e01b825260419052fd5b88513d8b823e3d90fd5b634e487b7160e01b8e5260418752858efd5b8b5162461bcd60e51b815260208188015260188187015277125b9cdd59999a58da595b9d081515149554d5081cd95b9d60421b91810191909152fd5b8b5162461bcd60e51b815260208188015260148187015273496e76616c6964207461726765742076616c756560601b91810191909152fd5b8b5162461bcd60e51b8152602081880152600e818701526d13dc9858db19481b9bdd081cd95d60921b91810191909152fd5b8a5162461bcd60e51b81526020818701526010818601526f496e76616c696420646561646c696e6560801b81880152fd5b8a5162461bcd60e51b815260208187015260168186015275496e73756666696369656e74206c697175696469747960501b81880152fd5b8a80fd5b8980fd5b6040519190601f01601f191682016001600160401b038111838210176200079157604052565b634e487b7160e01b600052604160045260246000fd5b81601f82011215620007fe578035906001600160401b0382116200079157620007da601f8301601f19166020016200076b565b9282845260208383010111620007fe57816000926020809301838601378301015290565b600080fd5b6002548110156200081f57600260005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b031633036200084a57565b60405163118cdaa760e01b8152336004820152602490fd5b919082018092116200087057565b634e487b7160e01b600052601160045260246000fd5b919082039182116200087057565b600411156200089f57565b634e487b7160e01b600052602160045260246000fd5b919082519283825260005b848110620008e2575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201620008c0565b6000198114620008705760010190565b6001600160401b038111620007915760051b60200190565b9160039283549283821015620009fd576200093b908262000862565b838111620009f5575b62000950828262000886565b9162000966620009608462000907565b6200076b565b9280845262000978601f199162000907565b0160209036828601378396825b8481106200099557505050505050565b620009a08162000803565b905490831b1c6001600160a01b031690620009bc858262000886565b918751831015620009e05784620009da9360051b89010152620008f7565b62000985565b60246000634e487b7160e01b81526032600452fd5b508262000944565b5050909150604051602081018181106001600160401b038211176200079157604052600081526000368137919056fe6080604052620012be80380380620000178162000415565b928339810160c082820312620004105781516001600160a01b0391908281169081900362000410576020938481015160049384821015620004105760408301516060840151608085015191956001600160401b039590928681116200041057846200008491830162000451565b9360a082015187811162000410576200009e920162000451565b978215620003f8576000928084549283167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a3600580546001600160a01b031916821781556001600160a81b03199092161760a09590951b60ff60a01b16949094178255600195865560025581519284841162000301576003938454938785811c95168015620003ed575b8b861014620003da5781908b601f9687811162000386575b50508b908683116001146200032057859262000314575b505060001982871b1c191690871b1784555b875194851162000301578654908682811c92168015620002f6575b8a831014620002e3578382116200029d575b50508791841160011462000238579583949596936200022c575b505082841b92600019911b1c19161782555b3460065534901c806007556008553415620001ea57604051610dfa9081620004c48239f35b6064916040519162461bcd60e51b8352820152601e60248201527f4d7573742070726f7669646520696e697469616c206c697175696469747900006044820152fd5b015191503880620001b3565b9190601f19841696868452888420935b898982106200028857505084869798106200026d575b50505050811b018255620001c5565b01519060f884600019921b161c19169055388080806200025e565b82840151865594870194928301920162000248565b8783528983209084808801821c8301938c8910620002d9575b01901c019086905b828110620002cd575062000199565b838155018690620002be565b93508293620002b6565b634e487b7160e01b835260228852602483fd5b91607f169162000187565b634e487b7160e01b825260418752602482fd5b0151905038806200015a565b8786528c86208a94509190601f198416878f5b8282106200036c575050841162000353575b505050811b0184556200016c565b015160001983891b60f8161c1916905538808062000345565b8484015186558d9790950194938401939081019062000333565b909192508786528682872091818601871c8301938610620003d0575b918b918695949301871c01915b828110620003c157508d915062000143565b8781558594508b9101620003af565b92508192620003a2565b634e487b7160e01b845260228952602484fd5b94607f16946200012b565b604051631e4fbdf760e01b81526000818a0152602490fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200043b57604052565b634e487b7160e01b600052604160045260246000fd5b919080601f84011215620004105782516001600160401b0381116200043b5760209062000487601f8201601f1916830162000415565b92818452828287010111620004105760005b818110620004af57508260009394955001015290565b85810183015184820184015282016200049956fe6080604081815260049081361015610022575b505050361561002057600080fd5b005b600092833560e01c90816302d05d3f146109365750806312b01b161461091957806315770f92146108fa5780631589c67e146108c0578063160ec0f61461087f578063172e640b1461084557806323341a05146107ba57806329dcb0cf1461079b5780632e3121521461077b5780633bde5ba81461075457806341b0c9ba146107355780634a79d50c146107175780634fb444e2146105b75780636f1d4ea41461020c578063715018a6146106bd5780638779086f146106a05780638da5cb5b146106785780639e075449146105d6578063a3b5afb1146105b7578063a9709c0c14610515578063b713a50a146104eb578063be040fb014610350578063c390bd3014610260578063d13f04081461022b578063d8c60f8f1461020c578063dbb3f537146101e45763f2fde38b0361001257346101e05760203660031901126101e0576001600160a01b038235818116939192908490036101dc57610185610b2c565b83156101c657505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b83823461020857816003193601126102085760209060ff6009541690519015158152f35b5080fd5b8382346102085781600319360112610208576020906007549051908152f35b83823461020857816003193601126102085761025c90610249610a87565b905191829160208352602083019061095b565b0390f35b50346101e05760203660031901126101e05781359182151580930361034c57610287610b2c565b6002544210610315576009549060ff82166102df575061ffff1916600883901b61ff001617600117600955519081527ff528f3b02f5c2503827fc677c9d0cb54ffbf11ed32cb659f73243b70dea7cf0e90602090a180f35b606490602084519162461bcd60e51b8352820152601060248201526f105b1c9958591e481c995cdbdb1d995960821b6044820152fd5b6020606492519162461bcd60e51b8352820152601260248201527113585c9ad95d081b9bdd08195e1c1a5c995960721b6044820152fd5b8380fd5b50346101e057826003193601126101e05760095460ff8116156104b257839060081c60ff16808061049e575b15610443575050338352600a6020526103b0818420546103ab600754916103a560085484610c58565b90610c7b565b610c8e565b91338452600a60205283828120555b821561040b575082808080853382f11561040057519081527f4896181ff8f4543cc00db9fe9b6fb7e6f032b7eb772c72ab1ec1b4d2e03b936960203392a280f35b51913d9150823e3d90fd5b6020606492519162461bcd60e51b835282015260136024820152724e6f207061796f757420617661696c61626c6560681b6044820152fd5b929092158061048a575b156103bf579150338352600b602052610477818420546103ab600754916103a56008548094610c58565b91338452600b60205283828120556103bf565b50338452600b60205281842054151561044d565b50338552600a60205282852054151561037c565b815162461bcd60e51b8152602081850152601360248201527213585c9ad95d081b9bdd081c995cdbdb1d9959606a1b6044820152606490fd5b508234610512576020366003190112610512575061050b60209235610d0d565b9051908152f35b80fd5b8382816003193601126102085761052d341515610b58565b61053a6002544210610b97565b61054960ff6009541615610bd4565b7fe1041d9c991be14de57962a3dc66585763c8a429296164c00f09e33efa911da261057334610d0d565b9161057f831515610c12565b338452600b602052808420610595848254610c58565b90556105a334600854610c58565b60085580519283523460208401523392a280f35b8382346102085781600319360112610208576020906008549051908152f35b838281600319360112610208576105ee341515610b58565b6105fb6002544210610b97565b61060a60ff6009541615610bd4565b7f6d4a344432c4a77b32c68cde302b92ae3600e370c5b592fca4d033a427b69d7961063434610cae565b91610640831515610c12565b338452600a602052808420610656848254610c58565b905561066434600754610c58565b60075580519283523460208401523392a280f35b838234610208578160031936011261020857905490516001600160a01b039091168152602090f35b83823461020857816003193601126102085760209061050b610d4c565b83346105125780600319360112610512576106d6610b2c565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b83823461020857816003193601126102085761025c9061024961099b565b8382346102085781600319360112610208576020906001549051908152f35b83823461020857816003193601126102085760209060ff60095460081c1690519015158152f35b508234610512576020366003190112610512575061050b60209235610cae565b8382346102085781600319360112610208576020906002549051908152f35b83823461020857816003193601126102085761080b906001549060ff60025460075460085490600954926107ec61099b565b966108196107f8610a87565b88519a8b9a610100808d528c019061095b565b908a820360208c015261095b565b968801526060870152608086015260a0850152818116151560c085015260081c16151560e08301520390f35b5090346101e05760203660031901126101e057356001600160a01b038116908190036101e05782829160209452600a845220549051908152f35b5082903461020857816003193601126102085760ff825460a01c16905191838210156108ad57602083838152f35b634e487b7160e01b815260218452602490fd5b5090346101e05760203660031901126101e057356001600160a01b038116908190036101e05782829160209452600b845220549051908152f35b8382346102085781600319360112610208576020906006549051908152f35b83823461020857816003193601126102085760209061050b610d8f565b8490346102085781600319360112610208576005546001600160a01b03168152602090f35b919082519283825260005b848110610987575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610966565b604051906000600354600181811c90808316928315610a7d575b6020938484108114610a6957838852908115610a4d5750600114610a11575b505050829003601f01601f1916820167ffffffffffffffff8111838210176109fb57604052565b634e487b7160e01b600052604160045260246000fd5b91925060036000528260002091836000935b838510610a3957505050508301013880806109d4565b805488860183015293019284908201610a23565b60ff1916878501525050151560051b84010190503880806109d4565b634e487b7160e01b86526022600452602486fd5b91607f16916109b5565b604051906000600454600181811c90808316928315610b22575b6020938484108114610a6957838852908115610a4d5750600114610ae657505050829003601f01601f1916820167ffffffffffffffff8111838210176109fb57604052565b91925060046000528260002091836000935b838510610b0e57505050508301013880806109d4565b805488860183015293019284908201610af8565b91607f1691610aa1565b6000546001600160a01b03163303610b4057565b60405163118cdaa760e01b8152336004820152602490fd5b15610b5f57565b60405162461bcd60e51b815260206004820152601060248201526f135d5cdd081cd95b99081515149554d560821b6044820152606490fd5b15610b9e57565b60405162461bcd60e51b815260206004820152600e60248201526d13585c9ad95d08195e1c1a5c995960921b6044820152606490fd5b15610bdb57565b60405162461bcd60e51b815260206004820152600f60248201526e13585c9ad95d081c995cdbdb1d9959608a1b6044820152606490fd5b15610c1957565b60405162461bcd60e51b8152602060048201526017602482015276125b9d985b1a59081c1d5c98da185cd948185b5bdd5b9d604a1b6044820152606490fd5b91908201809211610c6557565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610c6557565b8115610c98570490565b634e487b7160e01b600052601260045260246000fd5b6007548015610d0957670de0b6b3a76400009081830292808404831490151715610c65578181028181048303610c6557610cee610cf49260085490610c58565b90610c8e565b8101809111610c6557610d0691610c8e565b90565b5090565b6008548015610d0957670de0b6b3a76400009081830292808404831490151715610c65578181028181048303610c6557610cee610cf492600754610c58565b6007548015610d8257670de0b6b3a76400008102670de0b6b3a763ffff1982820401610c6557610cee610d069260085490610c58565b50670de0b6b3a764000090565b6008548015610d8257670de0b6b3a76400008102670de0b6b3a763ffff1982820401610c6557610cee610d0692600754610c5856fea2646970667358221220bb97076f06ee0028c1ed531f2079cdc02810a15f071d75f60b53f053da95450564736f6c63430008140033a26469706673582212202f1ee9589e7d6ad588c3d948d9bda0df41d6d5d8c328ee452b63558ab6c875eb64736f6c63430008140033",
  "deployedBytecode": "0x6040608081526004908136101562000022575b505036156200002057600080fd5b005b600091823560e01c9081631e1ab40f1462000426578163476343ee14620003d057816352d84d1e146200038a578163715018a614620003295781638da5cb5b14620002ff578163a04ddcad146200028c578163b56cf011146200026c578163b7d862251462000246578163c801892c146200021b578163dce0b4e414620001fa578163e3e10caa14620001b0578163ec979082146200018f578163f2fde38b14620000f6575063fd69f3c203620000125734620000f25781600319360112620000f2576020906003549051908152f35b5080fd5b919050346200018b5760203660031901126200018b576001600160a01b0382358181169391929084900362000187576200012f62000835565b83156200017157505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b505034620000f25781600319360112620000f2576020906003549051908152f35b839034620000f2576020366003190112620000f257356001600160a01b03811690819003620000f257620001e362000835565b600180546001600160a01b03191691909117905580f35b505034620000f25781600319360112620000f2576020906005549051908152f35b505034620000f25781600319360112620000f25760015490516001600160a01b039091168152602090f35b839034620000f2576020366003190112620000f2576200026562000835565b3560055580f35b9050346200018b57826003193601126200018b5760209250549051908152f35b9050346200018b57816003193601126200018b57620002b1839160243590356200091f565b8391935192828401928452845180935260608401926020809601915b818110620002e15750505082938301520390f35b82516001600160a01b031685529386019391860191600101620002cd565b505034620000f25781600319360112620000f257905490516001600160a01b039091168152602090f35b833462000387578060031936011262000387576200034662000835565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b9050346200018b5760203660031901126200018b573591600254831015620003875750620003ba60209262000803565b905491519160018060a01b039160031b1c168152f35b505034620000f25781600319360112620000f257620003ee62000835565b8180808060018060a01b0381541647908282156200041c575bf11562000412575080f35b51903d90823e3d90fd5b506108fc62000407565b838360a0366003190112620000f2578235838110156200018b57604480359460649160248035926001600160401b03929185358481116200076757620004709036908401620007a7565b9360843581811162000763576200048b9036908501620007a7565b968354908134106200072c57428d1115620006fb576001546001600160a01b039690871615620006c95788156200069157620004cb600554809462000862565b341062000655575050620004e0903462000886565b90620004ec8962000894565b60ff891690620004fc8262000894565b8a51916112be808401928311848410176200064357918e8a8e6200056394879662000a2d8839338552620005308162000894565b6020850152830152606082015260c060808201526200055360c082018a620008b5565b9060a08183039101528a620008b5565b0391f08015620006395783169860025492600160401b84101562000629575050509262000620620006107f46fad52d6904922815eb238694b5546e7472084f62d8b55a107c98953a666b139460209b94620005c68860018e9a0160025562000803565b819291549060031b918a831b921b1916179055620005e6600354620008f7565b600355620005f48962000894565b895194859485528c85015260808a8501526080840190620008b5565b82810360608401523396620008b5565b0390a451908152f35b634e487b7160e01b825260419052fd5b88513d8b823e3d90fd5b634e487b7160e01b8e5260418752858efd5b8b5162461bcd60e51b815260208188015260188187015277125b9cdd59999a58da595b9d081515149554d5081cd95b9d60421b91810191909152fd5b8b5162461bcd60e51b815260208188015260148187015273496e76616c6964207461726765742076616c756560601b91810191909152fd5b8b5162461bcd60e51b8152602081880152600e818701526d13dc9858db19481b9bdd081cd95d60921b91810191909152fd5b8a5162461bcd60e51b81526020818701526010818601526f496e76616c696420646561646c696e6560801b81880152fd5b8a5162461bcd60e51b815260208187015260168186015275496e73756666696369656e74206c697175696469747960501b81880152fd5b8a80fd5b8980fd5b6040519190601f01601f191682016001600160401b038111838210176200079157604052565b634e487b7160e01b600052604160045260246000fd5b81601f82011215620007fe578035906001600160401b0382116200079157620007da601f8301601f19166020016200076b565b9282845260208383010111620007fe57816000926020809301838601378301015290565b600080fd5b6002548110156200081f57600260005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b031633036200084a57565b60405163118cdaa760e01b8152336004820152602490fd5b919082018092116200087057565b634e487b7160e01b600052601160045260246000fd5b919082039182116200087057565b600411156200089f57565b634e487b7160e01b600052602160045260246000fd5b919082519283825260005b848110620008e2575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201620008c0565b6000198114620008705760010190565b6001600160401b038111620007915760051b60200190565b9160039283549283821015620009fd576200093b908262000862565b838111620009f5575b62000950828262000886565b9162000966620009608462000907565b6200076b565b9280845262000978601f199162000907565b0160209036828601378396825b8481106200099557505050505050565b620009a08162000803565b905490831b1c6001600160a01b031690620009bc858262000886565b918751831015620009e05784620009da9360051b89010152620008f7565b62000985565b60246000634e487b7160e01b81526032600452fd5b508262000944565b5050909150604051602081018181106001600160401b038211176200079157604052600081526000368137919056fe6080604052620012be80380380620000178162000415565b928339810160c082820312620004105781516001600160a01b0391908281169081900362000410576020938481015160049384821015620004105760408301516060840151608085015191956001600160401b039590928681116200041057846200008491830162000451565b9360a082015187811162000410576200009e920162000451565b978215620003f8576000928084549283167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a3600580546001600160a01b031916821781556001600160a81b03199092161760a09590951b60ff60a01b16949094178255600195865560025581519284841162000301576003938454938785811c95168015620003ed575b8b861014620003da5781908b601f9687811162000386575b50508b908683116001146200032057859262000314575b505060001982871b1c191690871b1784555b875194851162000301578654908682811c92168015620002f6575b8a831014620002e3578382116200029d575b50508791841160011462000238579583949596936200022c575b505082841b92600019911b1c19161782555b3460065534901c806007556008553415620001ea57604051610dfa9081620004c48239f35b6064916040519162461bcd60e51b8352820152601e60248201527f4d7573742070726f7669646520696e697469616c206c697175696469747900006044820152fd5b015191503880620001b3565b9190601f19841696868452888420935b898982106200028857505084869798106200026d575b50505050811b018255620001c5565b01519060f884600019921b161c19169055388080806200025e565b82840151865594870194928301920162000248565b8783528983209084808801821c8301938c8910620002d9575b01901c019086905b828110620002cd575062000199565b838155018690620002be565b93508293620002b6565b634e487b7160e01b835260228852602483fd5b91607f169162000187565b634e487b7160e01b825260418752602482fd5b0151905038806200015a565b8786528c86208a94509190601f198416878f5b8282106200036c575050841162000353575b505050811b0184556200016c565b015160001983891b60f8161c1916905538808062000345565b8484015186558d9790950194938401939081019062000333565b909192508786528682872091818601871c8301938610620003d0575b918b918695949301871c01915b828110620003c157508d915062000143565b8781558594508b9101620003af565b92508192620003a2565b634e487b7160e01b845260228952602484fd5b94607f16946200012b565b604051631e4fbdf760e01b81526000818a0152602490fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200043b57604052565b634e487b7160e01b600052604160045260246000fd5b919080601f84011215620004105782516001600160401b0381116200043b5760209062000487601f8201601f1916830162000415565b92818452828287010111620004105760005b818110620004af57508260009394955001015290565b85810183015184820184015282016200049956fe6080604081815260049081361015610022575b505050361561002057600080fd5b005b600092833560e01c90816302d05d3f146109365750806312b01b161461091957806315770f92146108fa5780631589c67e146108c0578063160ec0f61461087f578063172e640b1461084557806323341a05146107ba57806329dcb0cf1461079b5780632e3121521461077b5780633bde5ba81461075457806341b0c9ba146107355780634a79d50c146107175780634fb444e2146105b75780636f1d4ea41461020c578063715018a6146106bd5780638779086f146106a05780638da5cb5b146106785780639e075449146105d6578063a3b5afb1146105b7578063a9709c0c14610515578063b713a50a146104eb578063be040fb014610350578063c390bd3014610260578063d13f04081461022b578063d8c60f8f1461020c578063dbb3f537146101e45763f2fde38b0361001257346101e05760203660031901126101e0576001600160a01b038235818116939192908490036101dc57610185610b2c565b83156101c657505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b83823461020857816003193601126102085760209060ff6009541690519015158152f35b5080fd5b8382346102085781600319360112610208576020906007549051908152f35b83823461020857816003193601126102085761025c90610249610a87565b905191829160208352602083019061095b565b0390f35b50346101e05760203660031901126101e05781359182151580930361034c57610287610b2c565b6002544210610315576009549060ff82166102df575061ffff1916600883901b61ff001617600117600955519081527ff528f3b02f5c2503827fc677c9d0cb54ffbf11ed32cb659f73243b70dea7cf0e90602090a180f35b606490602084519162461bcd60e51b8352820152601060248201526f105b1c9958591e481c995cdbdb1d995960821b6044820152fd5b6020606492519162461bcd60e51b8352820152601260248201527113585c9ad95d081b9bdd08195e1c1a5c995960721b6044820152fd5b8380fd5b50346101e057826003193601126101e05760095460ff8116156104b257839060081c60ff16808061049e575b15610443575050338352600a6020526103b0818420546103ab600754916103a560085484610c58565b90610c7b565b610c8e565b91338452600a60205283828120555b821561040b575082808080853382f11561040057519081527f4896181ff8f4543cc00db9fe9b6fb7e6f032b7eb772c72ab1ec1b4d2e03b936960203392a280f35b51913d9150823e3d90fd5b6020606492519162461bcd60e51b835282015260136024820152724e6f207061796f757420617661696c61626c6560681b6044820152fd5b929092158061048a575b156103bf579150338352600b602052610477818420546103ab600754916103a56008548094610c58565b91338452600b60205283828120556103bf565b50338452600b60205281842054151561044d565b50338552600a60205282852054151561037c565b815162461bcd60e51b8152602081850152601360248201527213585c9ad95d081b9bdd081c995cdbdb1d9959606a1b6044820152606490fd5b508234610512576020366003190112610512575061050b60209235610d0d565b9051908152f35b80fd5b8382816003193601126102085761052d341515610b58565b61053a6002544210610b97565b61054960ff6009541615610bd4565b7fe1041d9c991be14de57962a3dc66585763c8a429296164c00f09e33efa911da261057334610d0d565b9161057f831515610c12565b338452600b602052808420610595848254610c58565b90556105a334600854610c58565b60085580519283523460208401523392a280f35b8382346102085781600319360112610208576020906008549051908152f35b838281600319360112610208576105ee341515610b58565b6105fb6002544210610b97565b61060a60ff6009541615610bd4565b7f6d4a344432c4a77b32c68cde302b92ae3600e370c5b592fca4d033a427b69d7961063434610cae565b91610640831515610c12565b338452600a602052808420610656848254610c58565b905561066434600754610c58565b60075580519283523460208401523392a280f35b838234610208578160031936011261020857905490516001600160a01b039091168152602090f35b83823461020857816003193601126102085760209061050b610d4c565b83346105125780600319360112610512576106d6610b2c565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b83823461020857816003193601126102085761025c9061024961099b565b8382346102085781600319360112610208576020906001549051908152f35b83823461020857816003193601126102085760209060ff60095460081c1690519015158152f35b508234610512576020366003190112610512575061050b60209235610cae565b8382346102085781600319360112610208576020906002549051908152f35b83823461020857816003193601126102085761080b906001549060ff60025460075460085490600954926107ec61099b565b966108196107f8610a87565b88519a8b9a610100808d528c019061095b565b908a820360208c015261095b565b968801526060870152608086015260a0850152818116151560c085015260081c16151560e08301520390f35b5090346101e05760203660031901126101e057356001600160a01b038116908190036101e05782829160209452600a845220549051908152f35b5082903461020857816003193601126102085760ff825460a01c16905191838210156108ad57602083838152f35b634e487b7160e01b815260218452602490fd5b5090346101e05760203660031901126101e057356001600160a01b038116908190036101e05782829160209452600b845220549051908152f35b8382346102085781600319360112610208576020906006549051908152f35b83823461020857816003193601126102085760209061050b610d8f565b8490346102085781600319360112610208576005546001600160a01b03168152602090f35b919082519283825260005b848110610987575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610966565b604051906000600354600181811c90808316928315610a7d575b6020938484108114610a6957838852908115610a4d5750600114610a11575b505050829003601f01601f1916820167ffffffffffffffff8111838210176109fb57604052565b634e487b7160e01b600052604160045260246000fd5b91925060036000528260002091836000935b838510610a3957505050508301013880806109d4565b805488860183015293019284908201610a23565b60ff1916878501525050151560051b84010190503880806109d4565b634e487b7160e01b86526022600452602486fd5b91607f16916109b5565b604051906000600454600181811c90808316928315610b22575b6020938484108114610a6957838852908115610a4d5750600114610ae657505050829003601f01601f1916820167ffffffffffffffff8111838210176109fb57604052565b91925060046000528260002091836000935b838510610b0e57505050508301013880806109d4565b805488860183015293019284908201610af8565b91607f1691610aa1565b6000546001600160a01b03163303610b4057565b60405163118cdaa760e01b8152336004820152602490fd5b15610b5f57565b60405162461bcd60e51b815260206004820152601060248201526f135d5cdd081cd95b99081515149554d560821b6044820152606490fd5b15610b9e57565b60405162461bcd60e51b815260206004820152600e60248201526d13585c9ad95d08195e1c1a5c995960921b6044820152606490fd5b15610bdb57565b60405162461bcd60e51b815260206004820152600f60248201526e13585c9ad95d081c995cdbdb1d9959608a1b6044820152606490fd5b15610c1957565b60405162461bcd60e51b8152602060048201526017602482015276125b9d985b1a59081c1d5c98da185cd948185b5bdd5b9d604a1b6044820152606490fd5b91908201809211610c6557565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610c6557565b8115610c98570490565b634e487b7160e01b600052601260045260246000fd5b6007548015610d0957670de0b6b3a76400009081830292808404831490151715610c65578181028181048303610c6557610cee610cf49260085490610c58565b90610c8e565b8101809111610c6557610d0691610c8e565b90565b5090565b6008548015610d0957670de0b6b3a76400009081830292808404831490151715610c65578181028181048303610c6557610cee610cf492600754610c58565b6007548015610d8257670de0b6b3a76400008102670de0b6b3a763ffff1982820401610c6557610cee610d069260085490610c58565b50670de0b6b3a764000090565b6008548015610d8257670de0b6b3a76400008102670de0b6b3a763ffff1982820401610c6557610cee610d0692600754610c5856fea2646970667358221220bb97076f06ee0028c1ed531f2079cdc02810a15f071d75f60b53f053da95450564736f6c63430008140033a26469706673582212202f1ee9589e7d6ad588c3d948d9bda0df41d6d5d8c328ee452b63558ab6c875eb64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PredictionFactoryNative",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createTTrustMarket(uint8,uint256,uint256,string,string)": {
        "notice": "Create a new TTrust prediction market using native TTRUST"
      },
      "getActiveMarkets(uint256,uint256)": {
        "notice": "Get active markets (simple pagination)"
      },
      "getMarketCount()": {
        "notice": "Get market count"
      },
      "setCreationFee(uint256)": {
        "notice": "Update fees"
      },
      "setTTrustPriceOracle(address)": {
        "notice": "Set oracle address"
      },
      "withdrawFees()": {
        "notice": "Withdraw collected fees (native TTRUST)"
      }
    },
    "notice": "Factory contract for creating TTrust-based prediction markets using native TTRUST token",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/PredictionFactoryNative.sol:PredictionFactoryNative",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 196,
        "contract": "contracts/PredictionFactoryNative.sol:PredictionFactoryNative",
        "label": "ttustPriceOracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(TTrustPriceOracle)1496"
      },
      {
        "astId": 199,
        "contract": "contracts/PredictionFactoryNative.sol:PredictionFactoryNative",
        "label": "allMarkets",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 201,
        "contract": "contracts/PredictionFactoryNative.sol:PredictionFactoryNative",
        "label": "marketCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 204,
        "contract": "contracts/PredictionFactoryNative.sol:PredictionFactoryNative",
        "label": "minimumLiquidity",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 207,
        "contract": "contracts/PredictionFactoryNative.sol:PredictionFactoryNative",
        "label": "creationFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(TTrustPriceOracle)1496": {
        "encoding": "inplace",
        "label": "contract TTrustPriceOracle",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}