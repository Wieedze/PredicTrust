{
  "address": "0x08c4E02bC77db2517D14FebBdd8D29f95aac0d1F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ttrustToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ttustPriceOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum PredictionFactoryTTrustSimple.PredictionType",
          "name": "predictionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "TTrustMarketCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PredictionFactoryTTrustSimple.PredictionType",
          "name": "_predictionType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_targetValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_predictionQuestion",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_liquidityAmount",
          "type": "uint256"
        }
      ],
      "name": "createTTrustMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "marketAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getActiveMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "markets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setCreationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setTTrustPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ttrustToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ttustPriceOracle",
      "outputs": [
        {
          "internalType": "contract TTrustPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b615925c225ca33ddfa9791c6a962dceda7bfb3b4cfca1e483f9c8c9fedf72c",
  "receipt": {
    "to": null,
    "from": "0x0B940A81271aD090AbD2C18d1a5873e5cb93D42a",
    "contractAddress": "0x08c4E02bC77db2517D14FebBdd8D29f95aac0d1F",
    "transactionIndex": 1,
    "gasUsed": "2658417",
    "logsBloom": "0x
    "blockHash": "0x80ea904513da24d5d0f5c8cdba481f89ba36d9ca96eca9ebc86d92013ac4cb49",
    "transactionHash": "0x6b615925c225ca33ddfa9791c6a962dceda7bfb3b4cfca1e483f9c8c9fedf72c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 2820718,
        "transactionHash": "0x6b615925c225ca33ddfa9791c6a962dceda7bfb3b4cfca1e483f9c8c9fedf72c",
        "address": "0x08c4E02bC77db2517D14FebBdd8D29f95aac0d1F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000b940a81271ad090abd2c18d1a5873e5cb93d42a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x80ea904513da24d5d0f5c8cdba481f89ba36d9ca96eca9ebc86d92013ac4cb49"
      }
    ],
    "blockNumber": 2820718,
    "cumulativeGasUsed": "2658417",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0B940A81271aD090AbD2C18d1a5873e5cb93D42a",
    "0x926AD51f22Fb0e8764A6feF375465A662E7a8BE0",
    "0x9c8396223B7349fb16410D95fBBb5D5E4425Ed45"
  ],
  "numDeployments": 3,
  "solcInputHash": "acce09a98fb23e1d95439ba83bd1ecba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ttrustToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ttustPriceOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum PredictionFactoryTTrustSimple.PredictionType\",\"name\":\"predictionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"TTrustMarketCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PredictionFactoryTTrustSimple.PredictionType\",\"name\":\"_predictionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_targetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_predictionQuestion\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"createTTrustMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getActiveMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setCreationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setTTrustPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ttrustToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ttustPriceOracle\",\"outputs\":[{\"internalType\":\"contract TTrustPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PredictionFactoryTTrustSimple\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createTTrustMarket(uint8,uint256,uint256,string,string,uint256)\":{\"notice\":\"Create a new TTrust prediction market\"},\"getActiveMarkets(uint256,uint256)\":{\"notice\":\"Get active markets (simple pagination)\"},\"getMarketCount()\":{\"notice\":\"Get market count\"},\"setCreationFee(uint256)\":{\"notice\":\"Update fees\"},\"setTTrustPriceOracle(address)\":{\"notice\":\"Set oracle address\"},\"withdrawFees()\":{\"notice\":\"Withdraw collected fees\"}},\"notice\":\"Simplified factory contract for creating TTrust-based prediction markets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PredictionFactoryTTrustSimple.sol\":\"PredictionFactoryTTrustSimple\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/PredictionFactoryTTrustSimple.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { PredictionMarket } from \\\"./PredictionMarket.sol\\\";\\nimport { TTrustPriceOracle } from \\\"./TTrustPriceOracle.sol\\\";\\nimport { IERC20 } from \\\"./interfaces/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title PredictionFactoryTTrustSimple\\n * @notice Simplified factory contract for creating TTrust-based prediction markets\\n */\\ncontract PredictionFactoryTTrustSimple is Ownable {\\n    \\n    enum PredictionType {\\n        MARKET_CAP_ABOVE,\\n        MARKET_CAP_BELOW,\\n        PRICE_ABOVE,\\n        PRICE_BELOW\\n    }\\n    \\n    // TTrust token contract\\n    IERC20 public immutable ttrustToken;\\n    \\n    // Oracle\\n    TTrustPriceOracle public ttustPriceOracle;\\n    \\n    // Simple market registry\\n    address[] public allMarkets;\\n    uint256 public marketCount;\\n    \\n    // Settings\\n    uint256 public minimumLiquidity = 1e17; // 0.1 TTrust minimum\\n    uint256 public creationFee = 1e15; // 0.001 TTrust creation fee\\n    \\n    event TTrustMarketCreated(\\n        address indexed marketAddress,\\n        address indexed creator,\\n        PredictionType indexed predictionType,\\n        uint256 targetValue,\\n        uint256 deadline,\\n        string description\\n    );\\n    \\n    modifier validLiquidity(uint256 _liquidity) {\\n        require(_liquidity >= minimumLiquidity, \\\"Insufficient liquidity\\\");\\n        _;\\n    }\\n    \\n    modifier validDeadline(uint256 _deadline) {\\n        require(_deadline > block.timestamp, \\\"Invalid deadline\\\");\\n        _;\\n    }\\n    \\n    constructor(\\n        address _owner,\\n        address _ttrustToken,\\n        address _ttustPriceOracle\\n    ) Ownable(_owner) {\\n        ttrustToken = IERC20(_ttrustToken);\\n        \\n        if (_ttustPriceOracle != address(0)) {\\n            ttustPriceOracle = TTrustPriceOracle(_ttustPriceOracle);\\n        }\\n    }\\n    \\n    /**\\n     * @notice Create a new TTrust prediction market\\n     */\\n    function createTTrustMarket(\\n        PredictionType _predictionType,\\n        uint256 _targetValue,\\n        uint256 _deadline,\\n        string memory _title,\\n        string memory _predictionQuestion,\\n        uint256 _liquidityAmount\\n    )\\n        external\\n        validLiquidity(_liquidityAmount)\\n        validDeadline(_deadline)\\n        returns (address marketAddress)\\n    {\\n        require(address(ttustPriceOracle) != address(0), \\\"Oracle not set\\\");\\n        require(_targetValue > 0, \\\"Invalid target value\\\");\\n        \\n        // Check TTrust allowance and transfer tokens\\n        require(ttrustToken.allowance(msg.sender, address(this)) >= _liquidityAmount, \\\"Insufficient allowance\\\");\\n        require(ttrustToken.transferFrom(msg.sender, address(this), _liquidityAmount), \\\"Transfer failed\\\");\\n        \\n        // Calculate liquidity\\n        uint256 actualLiquidity = _liquidityAmount - creationFee;\\n        \\n        // Create the market  \\n        PredictionMarket.PredictionType marketPredictionType = PredictionMarket.PredictionType(uint8(_predictionType));\\n        \\n        PredictionMarket market = new PredictionMarket(\\n            msg.sender,\\n            address(ttrustToken),\\n            marketPredictionType,\\n            _targetValue,\\n            _deadline,\\n            _title,\\n            _predictionQuestion,\\n            actualLiquidity\\n        );\\n        \\n        marketAddress = address(market);\\n        \\n        // Register market\\n        allMarkets.push(marketAddress);\\n        marketCount++;\\n        \\n        emit TTrustMarketCreated(\\n            marketAddress,\\n            msg.sender,\\n            _predictionType,\\n            _targetValue,\\n            _deadline,\\n            _title\\n        );\\n    }\\n    \\n    /**\\n     * @notice Get market count\\n     */\\n    function getMarketCount() external view returns (uint256) {\\n        return marketCount;\\n    }\\n    \\n    /**\\n     * @notice Get active markets (simple pagination)\\n     */\\n    function getActiveMarkets(uint256 _offset, uint256 _limit) \\n        external \\n        view \\n        returns (address[] memory markets, uint256 total) \\n    {\\n        total = marketCount;\\n        \\n        if (_offset >= total) {\\n            return (new address[](0), total);\\n        }\\n        \\n        uint256 end = _offset + _limit;\\n        if (end > total) {\\n            end = total;\\n        }\\n        \\n        markets = new address[](end - _offset);\\n        for (uint256 i = _offset; i < end; i++) {\\n            markets[i - _offset] = allMarkets[i];\\n        }\\n    }\\n    \\n    /**\\n     * @notice Set oracle address\\n     */\\n    function setTTrustPriceOracle(address _oracle) external onlyOwner {\\n        ttustPriceOracle = TTrustPriceOracle(_oracle);\\n    }\\n    \\n    /**\\n     * @notice Update fees\\n     */\\n    function setCreationFee(uint256 _fee) external onlyOwner {\\n        creationFee = _fee;\\n    }\\n    \\n    /**\\n     * @notice Withdraw collected fees\\n     */\\n    function withdrawFees() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n}\",\"keccak256\":\"0x03d811e436a12cfc03d94960fe81ab3b0b6cc5f76d3fdcdfae3319b92ff113ab\",\"license\":\"MIT\"},\"contracts/PredictionMarket.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { PredictionMarketToken } from \\\"./PredictionMarketToken.sol\\\";\\nimport { IERC20 } from \\\"./interfaces/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title PredictionMarket\\n * @notice Complete prediction market with YES/NO trading\\n */\\ncontract PredictionMarket is Ownable {\\n    \\n    enum PredictionType {\\n        MARKET_CAP_ABOVE,\\n        MARKET_CAP_BELOW,\\n        PRICE_ABOVE,\\n        PRICE_BELOW\\n    }\\n    \\n    struct MarketDetails {\\n        PredictionType predictionType;\\n        uint256 targetValue;\\n        uint256 deadline;\\n        string title;\\n        string predictionQuestion;\\n        address creator;\\n        bool isResolved;\\n        bool targetReached;\\n        uint256 liquidityAmount;\\n        uint256 createdAt;\\n    }\\n    \\n    MarketDetails public marketDetails;\\n    IERC20 public ttrustToken;\\n    \\n    // YES/NO tokens\\n    PredictionMarketToken public yesToken;\\n    PredictionMarketToken public noToken;\\n    \\n    // Trading\\n    uint256 public yesTokens;\\n    uint256 public noTokens;\\n    uint256 public totalLiquidity;\\n    \\n    mapping(address => uint256) public yesBalances;\\n    mapping(address => uint256) public noBalances;\\n    \\n    event TokensBought(address indexed buyer, bool isYes, uint256 amount, uint256 cost);\\n    event TokensSold(address indexed seller, bool isYes, uint256 amount, uint256 payout);\\n    \\n    constructor(\\n        address _creator,\\n        address _ttrustToken,\\n        PredictionType _predictionType,\\n        uint256 _targetValue,\\n        uint256 _deadline,\\n        string memory _title,\\n        string memory _predictionQuestion,\\n        uint256 _liquidityAmount\\n    ) Ownable(_creator) {\\n        marketDetails = MarketDetails({\\n            predictionType: _predictionType,\\n            targetValue: _targetValue,\\n            deadline: _deadline,\\n            title: _title,\\n            predictionQuestion: _predictionQuestion,\\n            creator: _creator,\\n            isResolved: false,\\n            targetReached: false,\\n            liquidityAmount: _liquidityAmount,\\n            createdAt: block.timestamp\\n        });\\n        \\n        ttrustToken = IERC20(_ttrustToken);\\n        \\n        // Create YES/NO tokens\\n        yesToken = new PredictionMarketToken(\\\"YES\\\", \\\"YES\\\", address(this), 1000000 * 1e18);\\n        noToken = new PredictionMarketToken(\\\"NO\\\", \\\"NO\\\", address(this), 1000000 * 1e18);\\n        \\n        // Initialize with some liquidity\\n        yesTokens = _liquidityAmount / 2;\\n        noTokens = _liquidityAmount / 2;\\n        totalLiquidity = _liquidityAmount;\\n    }\\n    \\n    /**\\n     * @notice Buy YES or NO tokens\\n     */\\n    function buyTokens(bool _isYes, uint256 _ttrustAmount) external {\\n        require(_ttrustAmount > 0, \\\"Amount must be > 0\\\");\\n        require(block.timestamp < marketDetails.deadline, \\\"Market ended\\\");\\n        require(!marketDetails.isResolved, \\\"Market resolved\\\");\\n        \\n        // Transfer TTRUST from user\\n        require(ttrustToken.transferFrom(msg.sender, address(this), _ttrustAmount), \\\"Transfer failed\\\");\\n        \\n        // Simple AMM pricing: tokens = amount\\n        uint256 tokensToMint = _ttrustAmount;\\n        \\n        if (_isYes) {\\n            yesToken.mint(msg.sender, tokensToMint);\\n            yesBalances[msg.sender] += tokensToMint;\\n            yesTokens += tokensToMint;\\n        } else {\\n            noToken.mint(msg.sender, tokensToMint);\\n            noBalances[msg.sender] += tokensToMint;\\n            noTokens += tokensToMint;\\n        }\\n        \\n        totalLiquidity += _ttrustAmount;\\n        \\n        emit TokensBought(msg.sender, _isYes, tokensToMint, _ttrustAmount);\\n    }\\n    \\n    /**\\n     * @notice Get current YES/NO token amounts\\n     */\\n    function getTokenAmounts() external view returns (uint256 yes, uint256 no) {\\n        return (yesTokens, noTokens);\\n    }\\n    \\n    /**\\n     * @notice Get user's position\\n     */\\n    function getUserPosition(address _user) external view returns (uint256 yesAmount, uint256 noAmount) {\\n        return (yesBalances[_user], noBalances[_user]);\\n    }\\n    \\n    /**\\n     * @notice Get market info for display\\n     */\\n    function getMarketInfo() external view returns (MarketDetails memory) {\\n        return marketDetails;\\n    }\\n    \\n    /**\\n     * @notice Get current prices (simplified)\\n     */\\n    function getCurrentPrices() external view returns (uint256 yesPrice, uint256 noPrice) {\\n        if (yesTokens + noTokens == 0) {\\n            return (1e18, 1e18); // 1 TRUST per token initially\\n        }\\n        \\n        // Simple pricing based on token ratio\\n        uint256 total = yesTokens + noTokens;\\n        yesPrice = (noTokens * 2e18) / total; // Price inversely related to supply\\n        noPrice = (yesTokens * 2e18) / total;\\n        \\n        return (yesPrice, noPrice);\\n    }\\n}\",\"keccak256\":\"0x790e86e2cc235935a9666fee215205ccf4353c77c9b75489fba38f8d246daaeb\",\"license\":\"MIT\"},\"contracts/PredictionMarketToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title PredictionMarketToken\\n * @notice Simple ERC20 token for YES/NO prediction outcomes\\n */\\ncontract PredictionMarketToken is ERC20, Ownable {\\n    \\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        uint256 initialSupply\\n    ) ERC20(name, symbol) Ownable(owner) {\\n        _mint(owner, initialSupply);\\n    }\\n    \\n    /**\\n     * @notice Mint tokens (only owner can mint)\\n     */\\n    function mint(address to, uint256 amount) external onlyOwner {\\n        _mint(to, amount);\\n    }\\n    \\n    /**\\n     * @notice Burn tokens (only owner can burn)\\n     */\\n    function burn(address from, uint256 amount) external onlyOwner {\\n        _burn(from, amount);\\n    }\\n}\",\"keccak256\":\"0x84c36abfcd83c88d20f47e0be5edbefe3cdb514ea429c79a64aa882efe633d73\",\"license\":\"MIT\"},\"contracts/TTrustPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { AggregatorV3Interface } from \\\"./interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title TTrustPriceOracle\\n * @notice Oracle contract to get TTrust price data from multiple sources\\n * @dev Can integrate with DEX prices, external oracles, or manual price feeds\\n */\\ncontract TTrustPriceOracle is Ownable {\\n    \\n    /////////////////\\n    /// Errors //////\\n    /////////////////\\n    \\n    error TTrustPriceOracle__PriceStale();\\n    error TTrustPriceOracle__InvalidPrice();\\n    error TTrustPriceOracle__OnlyTrustedUpdater();\\n    error TTrustPriceOracle__InvalidDEXAddress();\\n    \\n    //////////////////////////\\n    /// State Variables //////\\n    //////////////////////////\\n    \\n    struct PriceData {\\n        uint256 price;          // Price in USD (18 decimals)\\n        uint256 timestamp;      // Last update timestamp\\n        uint256 marketCap;      // Market cap in USD (18 decimals)\\n        bool isValid;           // Is this price valid\\n    }\\n    \\n    PriceData public currentPrice;\\n    \\n    uint256 public constant PRICE_STALENESS_THRESHOLD = 1 hours;\\n    uint256 public constant PRECISION = 1e18;\\n    \\n    // Trusted price updaters (can be set to external oracles or bots)\\n    mapping(address => bool) public trustedUpdaters;\\n    \\n    // DEX contract address for getting prices from liquidity pools\\n    address public dexRouter;\\n    address public ttustIntuitPair;\\n    \\n    // Backup price feeds (Chainlink style)\\n    AggregatorV3Interface public backupPriceFeed;\\n    \\n    /////////////////////////\\n    /// Events //////\\n    /////////////////////////\\n    \\n    event PriceUpdated(uint256 indexed price, uint256 indexed marketCap, uint256 timestamp, address updater);\\n    event TrustedUpdaterSet(address indexed updater, bool trusted);\\n    event DEXRouterSet(address indexed router, address indexed pair);\\n    event BackupPriceFeedSet(address indexed priceFeed);\\n    \\n    /////////////////\\n    /// Modifiers ///\\n    /////////////////\\n    \\n    modifier onlyTrustedUpdater() {\\n        if (!trustedUpdaters[msg.sender] && msg.sender != owner()) {\\n            revert TTrustPriceOracle__OnlyTrustedUpdater();\\n        }\\n        _;\\n    }\\n    \\n    //////////////////\\n    ////Constructor///\\n    //////////////////\\n    \\n    constructor(\\n        address _owner,\\n        uint256 _initialPrice,\\n        uint256 _initialMarketCap\\n    ) Ownable(_owner) {\\n        // Set initial price data\\n        currentPrice = PriceData({\\n            price: _initialPrice,\\n            timestamp: block.timestamp,\\n            marketCap: _initialMarketCap,\\n            isValid: true\\n        });\\n        \\n        // Owner is automatically a trusted updater\\n        trustedUpdaters[_owner] = true;\\n        \\n        emit PriceUpdated(_initialPrice, _initialMarketCap, block.timestamp, msg.sender);\\n    }\\n    \\n    /////////////////\\n    /// Functions ///\\n    /////////////////\\n    \\n    /**\\n     * @notice Update TTrust price manually (for trusted updaters)\\n     * @param _price New price in USD (18 decimals)\\n     * @param _marketCap New market cap in USD (18 decimals)\\n     */\\n    function updatePrice(uint256 _price, uint256 _marketCap) \\n        external \\n        onlyTrustedUpdater \\n    {\\n        if (_price == 0) {\\n            revert TTrustPriceOracle__InvalidPrice();\\n        }\\n        \\n        currentPrice = PriceData({\\n            price: _price,\\n            timestamp: block.timestamp,\\n            marketCap: _marketCap,\\n            isValid: true\\n        });\\n        \\n        emit PriceUpdated(_price, _marketCap, block.timestamp, msg.sender);\\n    }\\n    \\n    /**\\n     * @notice Get current TTrust price\\n     * @return price Current price in USD (18 decimals)\\n     * @return timestamp Last update timestamp\\n     */\\n    function getPrice() external view returns (uint256 price, uint256 timestamp) {\\n        if (!isPriceValid()) {\\n            revert TTrustPriceOracle__PriceStale();\\n        }\\n        \\n        return (currentPrice.price, currentPrice.timestamp);\\n    }\\n    \\n    /**\\n     * @notice Get current TTrust market cap\\n     * @return marketCap Current market cap in USD (18 decimals)\\n     * @return timestamp Last update timestamp\\n     */\\n    function getMarketCap() external view returns (uint256 marketCap, uint256 timestamp) {\\n        if (!isPriceValid()) {\\n            revert TTrustPriceOracle__PriceStale();\\n        }\\n        \\n        return (currentPrice.marketCap, currentPrice.timestamp);\\n    }\\n    \\n    /**\\n     * @notice Check if current price is valid (not stale)\\n     * @return bool True if price is valid\\n     */\\n    function isPriceValid() public view returns (bool) {\\n        return currentPrice.isValid && \\n               (block.timestamp - currentPrice.timestamp) <= PRICE_STALENESS_THRESHOLD;\\n    }\\n    \\n    /**\\n     * @notice Get price from DEX (if configured)\\n     * @return price Price from DEX\\n     */\\n    function getPriceFromDEX() external view returns (uint256 price) {\\n        // This would integrate with the existing DEX to get TTrust price\\n        // Implementation depends on the DEX structure\\n        if (dexRouter == address(0)) {\\n            return 0;\\n        }\\n        \\n        // TODO: Implement actual DEX price fetching\\n        // For now, return current price as fallback\\n        return currentPrice.price;\\n    }\\n    \\n    /////////////////////////\\n    /// Admin Functions ////\\n    /////////////////////////\\n    \\n    /**\\n     * @notice Set trusted updater status\\n     * @param _updater Address to set trust status for\\n     * @param _trusted Whether this address is trusted\\n     */\\n    function setTrustedUpdater(address _updater, bool _trusted) external onlyOwner {\\n        trustedUpdaters[_updater] = _trusted;\\n        emit TrustedUpdaterSet(_updater, _trusted);\\n    }\\n    \\n    /**\\n     * @notice Set DEX router and pair addresses for price fetching\\n     * @param _router DEX router address\\n     * @param _pair TTrust/INTUIT pair address\\n     */\\n    function setDEXAddresses(address _router, address _pair) external onlyOwner {\\n        if (_router == address(0) || _pair == address(0)) {\\n            revert TTrustPriceOracle__InvalidDEXAddress();\\n        }\\n        \\n        dexRouter = _router;\\n        ttustIntuitPair = _pair;\\n        \\n        emit DEXRouterSet(_router, _pair);\\n    }\\n    \\n    /**\\n     * @notice Set backup price feed (Chainlink style)\\n     * @param _priceFeed Chainlink price feed address\\n     */\\n    function setBackupPriceFeed(address _priceFeed) external onlyOwner {\\n        backupPriceFeed = AggregatorV3Interface(_priceFeed);\\n        emit BackupPriceFeedSet(_priceFeed);\\n    }\\n    \\n    /**\\n     * @notice Emergency function to invalidate current price\\n     */\\n    function invalidatePrice() external onlyOwner {\\n        currentPrice.isValid = false;\\n    }\\n    \\n    /////////////////////////\\n    /// Getter Functions ///\\n    /////////////////////////\\n    \\n    /**\\n     * @notice Get all price data\\n     */\\n    function getAllPriceData() \\n        external \\n        view \\n        returns (\\n            uint256 price,\\n            uint256 timestamp,\\n            uint256 marketCap,\\n            bool isValid,\\n            bool isStale\\n        ) \\n    {\\n        price = currentPrice.price;\\n        timestamp = currentPrice.timestamp;\\n        marketCap = currentPrice.marketCap;\\n        isValid = currentPrice.isValid;\\n        isStale = !isPriceValid();\\n    }\\n}\",\"keccak256\":\"0x6b0d0b1ef45606fdea83c76766cdbc1e28a586bc34b65b199c8a51f0681b1e32\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\",\"keccak256\":\"0x096ce3725b0b186b8159bec9b640c0eaec864a9f0bbe8b8d07d05db69afa57c5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    \\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x69122efac36bf1af74c050204f80733aeeefe92989b083a8d3e01ca9fc5568aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461012857601f612eca38819003918201601f19168301916001600160401b0383118484101761012d578084926060946040528339810103126101285761004781610143565b61005f604061005860208501610143565b9301610143565b6001600160a01b039182169190821561010f57816000549460018060a01b03199480868816176000558260405197167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a367016345785d8a000060045566038d7ea4c6800060055516608052169081610100575b612d7283816101588239608051818181610413015281816104f70152818161056701526106100152f35b600154161760015538806100d6565b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101285756fe608060405260043610156200001357600080fd5b60003560e01c80633d1d1033146200044257806347395d3814620003fb578063476343ee14620003a157806352d84d1e146200035a578063715018a614620002fd5780638da5cb5b14620002d2578063a04ddcad146200025d578063b56cf011146200023d578063b7d862251462000218578063c801892c14620001ed578063dce0b4e414620001cd578063e3e10caa1462000184578063ec97908214620000d1578063f2fde38b14620000f65763fd69f3c214620000d157600080fd5b34620000f1576000366003190112620000f1576020600354604051908152f35b600080fd5b34620000f1576020366003190112620000f1576004356001600160a01b0381811691829003620000f1576200012a62000a13565b81156200016b576000548260018060a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b34620000f1576020366003190112620000f1576004356001600160a01b03811690819003620000f157620001b762000a13565b600180546001600160a01b031916919091179055005b34620000f1576000366003190112620000f1576020600554604051908152f35b34620000f1576000366003190112620000f1576001546040516001600160a01b039091168152602090f35b34620000f1576020366003190112620000f1576200023562000a13565b600435600555005b34620000f1576000366003190112620000f1576020600454604051908152f35b34620000f1576040366003190112620000f1576200028060243560043562000aef565b604051906040820190604083528351809252606083019160208095019060005b818110620002b45750505082938301520390f35b82516001600160a01b031685529386019391860191600101620002a0565b34620000f1576000366003190112620000f1576000546040516001600160a01b039091168152602090f35b34620000f1576000366003190112620000f1576200031a62000a13565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34620000f1576020366003190112620000f157600435600254811015620000f15762000388602091620009e1565b905460405160039290921b1c6001600160a01b03168152f35b34620000f1576000366003190112620000f157620003be62000a13565b6000805481908190819047906001600160a01b0316828215620003f1575bf115620003e557005b6040513d6000823e3d90fd5b506108fc620003dc565b34620000f1576000366003190112620000f1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34620000f15760c0366003190112620000f157600480351015620000f1576064356001600160401b038111620000f1576200048290369060040162000986565b6084356001600160401b038111620000f157620004a490369060040162000986565b60045460a435106200092657426044351115620008ee576001546001600160a01b031615620008b857602435156200087c57604051636eb1769f60e11b81523360048201523060248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115620003e55760009162000844575b5060a4351162000806576040516323b872dd60e01b815233600482015230602482015260a435604482015260208160648160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115620003e557600091620007c4575b50156200078d57620005b960055460a43562000a40565b90620005c760043562000a64565b620005d760ff6004351662000a64565b604051918261213d8101106001600160401b0361213d8501111762000777576200069f839261213d62000c0085393361213d85019081527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166020909101526200064e60043560ff1662000a64565b60043560ff1661213d850160408101919091526024356060820152604435608082015261010060a082018190526200068891018762000a85565b9061213d8501820360c061213d8701015262000a85565b9060e061213d8401015203906000f08015620003e557600254916001600160a01b039190911690600160401b8310156200077757620006e783600160209501600255620009e1565b81549060031b9084821b9160018060a01b03901b19161790556200070d60035462000ac7565b6003556200071d60043562000a64565b6040519060243582526044358483015260606040830152827f8c404d69192f63488233d3d3e4c877b3609572ed8fabae80e97f3ad465654e9c60043593806200076c3395606083019062000a85565b0390a4604051908152f35b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b90506020813d602011620007fd575b81620007e26020938362000964565b81010312620000f157518015158103620000f15783620005a2565b3d9150620007d3565b60405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b6044820152606490fd5b90506020813d60201162000873575b81620008626020938362000964565b81010312620000f157518362000532565b3d915062000853565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207461726765742076616c756560601b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d13dc9858db19481b9bdd081cd95d60921b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f496e76616c696420646561646c696e6560801b6044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b6044820152606490fd5b90601f801991011681019081106001600160401b038211176200077757604052565b81601f82011215620000f1578035906001600160401b038211620007775760405192620009be601f8401601f19166020018562000964565b82845260208383010111620000f157816000926020809301838601378301015290565b600254811015620009fd57600260005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b0316330362000a2857565b60405163118cdaa760e01b8152336004820152602490fd5b9190820391821162000a4e57565b634e487b7160e01b600052601160045260246000fd5b6004111562000a6f57565b634e487b7160e01b600052602160045260246000fd5b919082519283825260005b84811062000ab2575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520162000a90565b600019811462000a4e5760010190565b6001600160401b038111620007775760051b60200190565b916003928354928382101562000bd057810180821162000a4e5783811162000bc8575b62000b1e828262000a40565b9162000b2a8362000ad7565b9262000b3a604051948562000964565b80845262000b4b601f199162000ad7565b0160209036828601378396825b84811062000b6857505050505050565b62000b7381620009e1565b905490831b1c6001600160a01b03169062000b8f858262000a40565b91875183101562000bb3578462000bad9360051b8901015262000ac7565b62000b58565b60246000634e487b7160e01b81526032600452fd5b508262000b12565b5050909150604051602081018181106001600160401b038211176200077757604052600081526000368137919056fe6080604052346200063e576200213d803803806200001d8162000643565b928339810190610100818303126200063e576200003a8162000669565b620000486020830162000669565b604083015160048110156200063e576060840151608085015160a08601519092906001600160401b0381116200063e5787620000869188016200067e565b60c08701519097906001600160401b0381116200063e5760e091620000ad9189016200067e565b960151946001600160a01b038116156200062557600080546001600160a01b038381166001600160a01b0319831681178455929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3604051966001600160401b0361014089019081119089111762000436576101408801604052828852836020890152846040890152886060890152608088015260018060a01b031660a0870152600060c0870152600060e0870152846101008701524261012087015260ff801960015416911617600155600255600355835160018060401b0381116200043657600454600181811c911680156200061a575b60208210146200051757601f8111620005b4575b506020601f82116001146200054457819293949560009262000538575b50508160011b916000199060031b1c1916176004555b608083015180519093906001600160401b0381116200043657600554600181811c911680156200052d575b60208210146200051757601f8111620004cd575b506020601f8211600114620004585781906101209495966000926200044c575b50508160011b916000199060031b1c1916176005555b60a0818101516006805460c085015160e08601516001600160b01b03199092166001600160a01b039485161790151590941b60ff60a01b169390931792151560a81b60ff60a81b1692909217909155610100820151600755910151600855600980546001600160a01b03191692909116919091179055604051610de3808201906001600160401b038211838310176200043657826060936200135a938385833960808082526003908201526259455360e81b60a08201526200033f60c082018281036020840152604090600381526259455360e81b60208201520190565b9030604082015269d3c21bcecceda1000000968791015203906000f080156200042a57600a80546001600160a01b0319166001600160a01b039290921691909117905560405192818401916001600160401b038311858410176200043657849384396080808352600290830152614e4f60f01b60a08301526060620003df60c08401848103602086015260409060028152614e4f60f01b60208201520190565b92306040820152015203906000f080156200042a5760018060a01b031660018060a01b0319600b541617600b558060011c80600c55600d55600e55604051610c699081620006f18239f35b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b0151905038806200024b565b600560005260206000209560005b601f1984168110620004b45750958291610120959697600194601f198116106200049a575b505050811b0160055562000261565b015160001960f88460031b161c191690553880806200048b565b8282015188556001909701966020928301920162000466565b60056000526020600020601f830160051c8101602084106200050f575b601f830160051c82018110620005025750506200022b565b60008155600101620004ea565b5080620004ea565b634e487b7160e01b600052602260045260246000fd5b90607f169062000217565b015190503880620001d6565b600460005260206000209060005b601f19841681106200059b575060019394959683601f1981161062000581575b505050811b01600455620001ec565b015160001960f88460031b161c1916905538808062000572565b9091602060018192858b01518155019301910162000552565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c81016020841062000612575b601f830160051c8201811062000605575050620001b9565b60008155600101620005ed565b5080620005ed565b90607f1690620001a5565b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200043657604052565b51906001600160a01b03821682036200063e57565b919080601f840112156200063e5782516001600160401b0381116200043657602090620006b4601f8201601f1916830162000643565b928184528282870101116200063e5760005b818110620006dc57508260009394955001015290565b8581018301518482018401528201620006c656fe608060408181526004918236101561001657600080fd5b600092833560e01c91826311a9f10a146108fc5750816315770f92146108dd57816323341a051461075557816347395d381461072c5781635b7c2dad146106e5578163715018a61461068b57816384d23a461461037b578163852d0d6e146103545781638da5cb5b1461032c578163997aa8e01461030d578163aa0e6bc4146102d3578163cd2013e214610299578163d73cc4df14610271578163e1eb060014610252578163f0d9bb2014610229578163f2fde38b14610194575063ffe3f24f146100e057600080fd5b346101905781600319360112610190576101329060ff60015416906002546003549160ff61015961010f6109ed565b61014b61011a610abb565b9160065497600754966008549881519c8d809d610921565b60208c01528a01526101408060608b0152890190610944565b908782036080890152610944565b9360018060a01b03811660a0870152818160a01c16151560c087015260a81c16151560e08501526101008401526101208301520390f35b5080fd5b91905034610225576020366003190112610225576001600160a01b03823581811693919290849003610221576101c8610b52565b831561020b5750506000548260018060a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b505034610190578160031936011261019057600a5490516001600160a01b039091168152602090f35b505034610190578160031936011261019057602090600d549051908152f35b82843461029657806003193601126102965750600c54600d5482519182526020820152f35b80fd5b90503461022557602036600319011261022557356001600160a01b038116908190036102255782829160209452600f845220549051908152f35b90503461022557602036600319011261022557356001600160a01b0381169081900361022557828291602094526010845220549051908152f35b505034610190578160031936011261019057602090600c549051908152f35b505034610190578160031936011261019057905490516001600160a01b039091168152602090f35b8284346102965780600319360112610296575061036f610bc1565b82519182526020820152f35b91905034610225578060031936011261022557813590811515928383036102215760248035938415610654576003544210156106235760ff60065460a01c166105ef579086929160018060a01b039182600954168651906323b872dd60e01b825233868301523083830152886044830152816064816020998a945af19081156105e5578a916105ab575b5015610578575087929190156104eb57600a5416803b156102255784516340c10f1960e01b81523392810192835260208301879052918391839182908490829060400103925af180156104e15790859392916104c8575b5050338652600f8152828620610473838254610b7e565b905561048182600c54610b7e565b600c555b61049182600e54610b7e565b600e5582519485528401528201527f740cf2efb8c5d89c163e271274fef112d5dd0c3784cc59bd724e10f643d5e01c60603392a280f35b6104d4919293506109b7565b610221578290853861045c565b84513d84823e3d90fd5b600b54169190823b156101905784516340c10f1960e01b8152339181019182526020820187905292839182908490829060400103925af1801561056e5761055b575b50829033865260108152828620610545838254610b7e565b905561055382600d54610b7e565b600d55610485565b946105678492966109b7565b949061052d565b83513d88823e3d90fd5b83600f6064928789519362461bcd60e51b85528401528201526e151c985b9cd9995c8819985a5b1959608a1b6044820152fd5b90508581813d83116105de575b6105c281836109cb565b810103126105da575180151581036105da5738610405565b8980fd5b503d6105b8565b87513d8c823e3d90fd5b50600f906020606494519362461bcd60e51b85528401528201526e13585c9ad95d081c995cdbdb1d9959608a1b6044820152fd5b50600c906020606494519362461bcd60e51b85528401528201526b13585c9ad95d08195b99195960a21b6044820152fd5b506012906020606494519362461bcd60e51b8552840152820152710416d6f756e74206d757374206265203e20360741b6044820152fd5b83346102965780600319360112610296576106a4610b52565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8391503461019057602036600319011261019057356001600160a01b03811690819003610190578152600f6020528180822054916010602052205482519182526020820152f35b50503461019057816003193601126101905760095490516001600160a01b039091168152602090f35b8391503461019057816003193601126101905782519061077482610984565b8282528260208301528284830152606080830152606060808301528260a08301528260c08301528260e083015261010090838284015283610120809401528451936107be85610984565b60ff6001541691808310156108ca57505083526002549360208401948552600354928185019384526107ee6109ed565b93606086019485526107fe610abb565b936080870194855260065460a0880196600160a01b60019003808316895260c08a01918360a01c60ff161515835260e08b019360a81c60ff161515845260075495858c0196875260085498888d01998a5280519d8e9d8e6020815260200190519061086891610921565b51908d01525160608c01525197610140988960808d01526101608c0161088d91610944565b90518b8203601f190160a08d01526108a59190610944565b98511660c08a015251151560e089015251151590870152519085015251908301520390f35b634e487b7160e01b825260219052602490fd5b505034610190578160031936011261019057602090600e549051908152f35b849034610190578160031936011261019057600b546001600160a01b03168152602090f35b90600482101561092e5752565b634e487b7160e01b600052602160045260246000fd5b919082519283825260005b848110610970575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161094f565b610140810190811067ffffffffffffffff8211176109a157604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116109a157604052565b90601f8019910116810190811067ffffffffffffffff8211176109a157604052565b60405190600060045490600182811c90808416938415610ab1575b6020948584108114610a9d5783885287949392918115610a7d5750600114610a3b575b5050610a39925003836109cb565b565b90939150600460005281600020936000915b818310610a65575050610a3993508201013880610a2b565b85548884018501529485019487945091830191610a4d565b915050610a3994925060ff191682840152151560051b8201013880610a2b565b634e487b7160e01b85526022600452602485fd5b91607f1691610a08565b60405190600060055490600182811c90808416938415610b48575b6020948584108114610a9d5783885287949392918115610a7d5750600114610b06575050610a39925003836109cb565b90939150600560005281600020936000915b818310610b30575050610a3993508201013880610a2b565b85548884018501529485019487945091830191610b18565b91607f1691610ad6565b6000546001600160a01b03163303610b6657565b60405163118cdaa760e01b8152336004820152602490fd5b91908201809211610b8b57565b634e487b7160e01b600052601160045260246000fd5b8115610bab570490565b634e487b7160e01b600052601260045260246000fd5b600c5490600d54610bd28184610b7e565b15610c2357610be18184610b7e565b671bc16d674ec800009182810290808204841490151715610b8b5781610c0691610ba1565b93828102928184041490151715610b8b57610c2091610ba1565b90565b50670de0b6b3a76400009150819056fea26469706673582212206a13c0f97bd5a40ed684602d84d75c4d4ef8de00985ce416ddaed29ceae522c764736f6c6343000814003360406080815234620003f75762000de3803803806200001e81620003fc565b9283398101608082820312620003f75781516001600160401b0390818111620003f757826200004f91850162000422565b926020928382015190838211620003f7576200006d91830162000422565b858201516001600160a01b03808216969293909291879003620003f75760600151938151818111620002f7576003908154906001948583811c93168015620003ec575b8a841014620003d6578190601f9384811162000380575b508a9084831160011462000319576000926200030d575b505060001982851b1c191690851b1782555b8551928311620002f75760049586548581811c91168015620002ec575b8a821014620002d7578281116200028c575b5088918411600114620002215793839491849260009562000215575b50501b92600019911b1c19161782555b8415620001fe57600580546001600160a01b0319811687179091558591167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360025490828201809211620001e9575060025560008381528083528481208054830190558451918252917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a35161094e9081620004958239f35b601190634e487b7160e01b6000525260246000fd5b8551631e4fbdf760e01b8152600081840152602490fd5b0151935038806200013b565b9190601f1984169287600052848a6000209460005b8c8983831062000274575050501062000259575b50505050811b0182556200014b565b01519060f884600019921b161c19169055388080806200024a565b86860151895590970196948501948893500162000236565b87600052896000208380870160051c8201928c8810620002cd575b0160051c019086905b828110620002c05750506200011f565b60008155018690620002b0565b92508192620002a7565b602288634e487b7160e01b6000525260246000fd5b90607f16906200010d565b634e487b7160e01b600052604160045260246000fd5b015190503880620000de565b60008681528c8120899550929190601f198516908e5b8282106200036857505084116200034f575b505050811b018255620000f0565b015160001983871b60f8161c1916905538808062000341565b8385015186558b979095019493840193018e6200032f565b909150846000528a6000208480850160051c8201928d8610620003cc575b918991869594930160051c01915b828110620003bc575050620000c7565b60008155859450899101620003ac565b925081926200039e565b634e487b7160e01b600052602260045260246000fd5b92607f1692620000b0565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002f757604052565b919080601f84011215620003f75782516001600160401b038111620002f75760209062000458601f8201601f19168301620003fc565b92818452828287010111620003f75760005b8181106200048057508260009394955001015290565b85810183015184820184015282016200046a56fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde03146106a557508063095ea7b3146105fc57806318160ddd146105dd57806323b872dd146104f8578063313ce567146104dc57806340c10f191461043f57806370a0823114610408578063715018a6146103a85780638da5cb5b1461037f57806395d89b411461027c5780639dc29fac146101c7578063a9059cbb14610196578063dd62ed3e146101495763f2fde38b146100bd57600080fd5b34610145576020366003190112610145576100d66107c6565b906100df6107f7565b6001600160a01b0391821692831561012f575050600580546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b505034610192578060031936011261019257806020926101676107c6565b61016f6107e1565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b5050346101925780600319360112610192576020906101c06101b66107c6565b6024359033610823565b5160018152f35b508290346101925782600319360112610192576101e26107c6565b90602435906101ef6107f7565b6001600160a01b038316928315610265578385528460205285852054918383106102465750508184956000805160206108f9833981519152936020938688528785520381872055816002540360025551908152a380f35b6102618484895194859463391434e360e21b865285016108da565b0390fd5b8551634b637e8f60e11b8152808301869052602490fd5b50919034610192578160031936011261019257805190828454600181811c90808316928315610375575b602093848410811461036257838852908115610346575060011461030e575b505050829003601f01601f191682019267ffffffffffffffff8411838510176102fb57508291826102f792528261077d565b0390f35b634e487b7160e01b815260418552602490fd5b919250868652828620918387935b83851061033257505050508301013880806102c5565b80548886018301529301928490820161031c565b60ff1916878501525050151560051b84010190503880806102c5565b634e487b7160e01b895260228a52602489fd5b91607f16916102a6565b50503461019257816003193601126101925760055490516001600160a01b039091168152602090f35b83346104055780600319360112610405576103c16107f7565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346101925760203660031901126101925760209181906001600160a01b036104306107c6565b16815280845220549051908152f35b5090346101455780600319360112610145576104596107c6565b90602435916104666107f7565b6001600160a01b03169283156104c757600254908382018092116104b4575084926000805160206108f98339815191529260209260025585855284835280852082815401905551908152a380f35b634e487b7160e01b865260119052602485fd5b84602492519163ec442f0560e01b8352820152fd5b5050346101925781600319360112610192576020905160128152f35b508234610405576060366003190112610405576105136107c6565b61051b6107e1565b916044359360018060a01b038316808352600160205286832033845260205286832054916000198303610557575b6020886101c0898989610823565b8683106105bf5781156105a8573315610591575082526001602090815286832033845281529186902090859003905582906101c087610549565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b9050610261868851938493637dc7a0d960e11b8552339085016108da565b5050346101925781600319360112610192576020906002549051908152f35b50346101455781600319360112610145576106156107c6565b60243590331561068e576001600160a01b031691821561067757508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849150833461014557826003193601126101455782600354600181811c90808316928315610773575b602093848410811461036257838852908115610757575060011461071e57505050829003601f01601f191682019267ffffffffffffffff8411838510176102fb57508291826102f792528261077d565b91925060038652828620918387935b83851061074357505050508301018580806102c5565b80548886018301529301928490820161072d565b60ff1916878501525050151560051b84010190508580806102c5565b91607f16916106ce565b6020808252825181830181905290939260005b8281106107b257505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610790565b600435906001600160a01b03821682036107dc57565b600080fd5b602435906001600160a01b03821682036107dc57565b6005546001600160a01b0316330361080b57565b60405163118cdaa760e01b8152336004820152602490fd5b916001600160a01b038084169283156108c157169283156108a8576000908382528160205260408220549083821061088b575091604082826000805160206108f9833981519152958760209652828652038282205586815220818154019055604051908152a3565b6102618460405193849363391434e360e21b8552600485016108da565b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b604091949392606082019560018060a01b031682526020820152015256feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220deccd82bc373edfe5e9b988bda4b10c5de0343f0b36d5c03a66e1f16ca4685d564736f6c63430008140033a26469706673582212202a7b3ec52e85717a700dd037f0e7f9537feeb02b2bef50e3ef9b9a9e90ec30bb64736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610156200001357600080fd5b60003560e01c80633d1d1033146200044257806347395d3814620003fb578063476343ee14620003a157806352d84d1e146200035a578063715018a614620002fd5780638da5cb5b14620002d2578063a04ddcad146200025d578063b56cf011146200023d578063b7d862251462000218578063c801892c14620001ed578063dce0b4e414620001cd578063e3e10caa1462000184578063ec97908214620000d1578063f2fde38b14620000f65763fd69f3c214620000d157600080fd5b34620000f1576000366003190112620000f1576020600354604051908152f35b600080fd5b34620000f1576020366003190112620000f1576004356001600160a01b0381811691829003620000f1576200012a62000a13565b81156200016b576000548260018060a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b34620000f1576020366003190112620000f1576004356001600160a01b03811690819003620000f157620001b762000a13565b600180546001600160a01b031916919091179055005b34620000f1576000366003190112620000f1576020600554604051908152f35b34620000f1576000366003190112620000f1576001546040516001600160a01b039091168152602090f35b34620000f1576020366003190112620000f1576200023562000a13565b600435600555005b34620000f1576000366003190112620000f1576020600454604051908152f35b34620000f1576040366003190112620000f1576200028060243560043562000aef565b604051906040820190604083528351809252606083019160208095019060005b818110620002b45750505082938301520390f35b82516001600160a01b031685529386019391860191600101620002a0565b34620000f1576000366003190112620000f1576000546040516001600160a01b039091168152602090f35b34620000f1576000366003190112620000f1576200031a62000a13565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34620000f1576020366003190112620000f157600435600254811015620000f15762000388602091620009e1565b905460405160039290921b1c6001600160a01b03168152f35b34620000f1576000366003190112620000f157620003be62000a13565b6000805481908190819047906001600160a01b0316828215620003f1575bf115620003e557005b6040513d6000823e3d90fd5b506108fc620003dc565b34620000f1576000366003190112620000f1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34620000f15760c0366003190112620000f157600480351015620000f1576064356001600160401b038111620000f1576200048290369060040162000986565b6084356001600160401b038111620000f157620004a490369060040162000986565b60045460a435106200092657426044351115620008ee576001546001600160a01b031615620008b857602435156200087c57604051636eb1769f60e11b81523360048201523060248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115620003e55760009162000844575b5060a4351162000806576040516323b872dd60e01b815233600482015230602482015260a435604482015260208160648160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115620003e557600091620007c4575b50156200078d57620005b960055460a43562000a40565b90620005c760043562000a64565b620005d760ff6004351662000a64565b604051918261213d8101106001600160401b0361213d8501111762000777576200069f839261213d62000c0085393361213d85019081527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166020909101526200064e60043560ff1662000a64565b60043560ff1661213d850160408101919091526024356060820152604435608082015261010060a082018190526200068891018762000a85565b9061213d8501820360c061213d8701015262000a85565b9060e061213d8401015203906000f08015620003e557600254916001600160a01b039190911690600160401b8310156200077757620006e783600160209501600255620009e1565b81549060031b9084821b9160018060a01b03901b19161790556200070d60035462000ac7565b6003556200071d60043562000a64565b6040519060243582526044358483015260606040830152827f8c404d69192f63488233d3d3e4c877b3609572ed8fabae80e97f3ad465654e9c60043593806200076c3395606083019062000a85565b0390a4604051908152f35b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b90506020813d602011620007fd575b81620007e26020938362000964565b81010312620000f157518015158103620000f15783620005a2565b3d9150620007d3565b60405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b6044820152606490fd5b90506020813d60201162000873575b81620008626020938362000964565b81010312620000f157518362000532565b3d915062000853565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207461726765742076616c756560601b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d13dc9858db19481b9bdd081cd95d60921b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f496e76616c696420646561646c696e6560801b6044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b6044820152606490fd5b90601f801991011681019081106001600160401b038211176200077757604052565b81601f82011215620000f1578035906001600160401b038211620007775760405192620009be601f8401601f19166020018562000964565b82845260208383010111620000f157816000926020809301838601378301015290565b600254811015620009fd57600260005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b0316330362000a2857565b60405163118cdaa760e01b8152336004820152602490fd5b9190820391821162000a4e57565b634e487b7160e01b600052601160045260246000fd5b6004111562000a6f57565b634e487b7160e01b600052602160045260246000fd5b919082519283825260005b84811062000ab2575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520162000a90565b600019811462000a4e5760010190565b6001600160401b038111620007775760051b60200190565b916003928354928382101562000bd057810180821162000a4e5783811162000bc8575b62000b1e828262000a40565b9162000b2a8362000ad7565b9262000b3a604051948562000964565b80845262000b4b601f199162000ad7565b0160209036828601378396825b84811062000b6857505050505050565b62000b7381620009e1565b905490831b1c6001600160a01b03169062000b8f858262000a40565b91875183101562000bb3578462000bad9360051b8901015262000ac7565b62000b58565b60246000634e487b7160e01b81526032600452fd5b508262000b12565b5050909150604051602081018181106001600160401b038211176200077757604052600081526000368137919056fe6080604052346200063e576200213d803803806200001d8162000643565b928339810190610100818303126200063e576200003a8162000669565b620000486020830162000669565b604083015160048110156200063e576060840151608085015160a08601519092906001600160401b0381116200063e5787620000869188016200067e565b60c08701519097906001600160401b0381116200063e5760e091620000ad9189016200067e565b960151946001600160a01b038116156200062557600080546001600160a01b038381166001600160a01b0319831681178455929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3604051966001600160401b0361014089019081119089111762000436576101408801604052828852836020890152846040890152886060890152608088015260018060a01b031660a0870152600060c0870152600060e0870152846101008701524261012087015260ff801960015416911617600155600255600355835160018060401b0381116200043657600454600181811c911680156200061a575b60208210146200051757601f8111620005b4575b506020601f82116001146200054457819293949560009262000538575b50508160011b916000199060031b1c1916176004555b608083015180519093906001600160401b0381116200043657600554600181811c911680156200052d575b60208210146200051757601f8111620004cd575b506020601f8211600114620004585781906101209495966000926200044c575b50508160011b916000199060031b1c1916176005555b60a0818101516006805460c085015160e08601516001600160b01b03199092166001600160a01b039485161790151590941b60ff60a01b169390931792151560a81b60ff60a81b1692909217909155610100820151600755910151600855600980546001600160a01b03191692909116919091179055604051610de3808201906001600160401b038211838310176200043657826060936200135a938385833960808082526003908201526259455360e81b60a08201526200033f60c082018281036020840152604090600381526259455360e81b60208201520190565b9030604082015269d3c21bcecceda1000000968791015203906000f080156200042a57600a80546001600160a01b0319166001600160a01b039290921691909117905560405192818401916001600160401b038311858410176200043657849384396080808352600290830152614e4f60f01b60a08301526060620003df60c08401848103602086015260409060028152614e4f60f01b60208201520190565b92306040820152015203906000f080156200042a5760018060a01b031660018060a01b0319600b541617600b558060011c80600c55600d55600e55604051610c699081620006f18239f35b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b0151905038806200024b565b600560005260206000209560005b601f1984168110620004b45750958291610120959697600194601f198116106200049a575b505050811b0160055562000261565b015160001960f88460031b161c191690553880806200048b565b8282015188556001909701966020928301920162000466565b60056000526020600020601f830160051c8101602084106200050f575b601f830160051c82018110620005025750506200022b565b60008155600101620004ea565b5080620004ea565b634e487b7160e01b600052602260045260246000fd5b90607f169062000217565b015190503880620001d6565b600460005260206000209060005b601f19841681106200059b575060019394959683601f1981161062000581575b505050811b01600455620001ec565b015160001960f88460031b161c1916905538808062000572565b9091602060018192858b01518155019301910162000552565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c81016020841062000612575b601f830160051c8201811062000605575050620001b9565b60008155600101620005ed565b5080620005ed565b90607f1690620001a5565b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200043657604052565b51906001600160a01b03821682036200063e57565b919080601f840112156200063e5782516001600160401b0381116200043657602090620006b4601f8201601f1916830162000643565b928184528282870101116200063e5760005b818110620006dc57508260009394955001015290565b8581018301518482018401528201620006c656fe608060408181526004918236101561001657600080fd5b600092833560e01c91826311a9f10a146108fc5750816315770f92146108dd57816323341a051461075557816347395d381461072c5781635b7c2dad146106e5578163715018a61461068b57816384d23a461461037b578163852d0d6e146103545781638da5cb5b1461032c578163997aa8e01461030d578163aa0e6bc4146102d3578163cd2013e214610299578163d73cc4df14610271578163e1eb060014610252578163f0d9bb2014610229578163f2fde38b14610194575063ffe3f24f146100e057600080fd5b346101905781600319360112610190576101329060ff60015416906002546003549160ff61015961010f6109ed565b61014b61011a610abb565b9160065497600754966008549881519c8d809d610921565b60208c01528a01526101408060608b0152890190610944565b908782036080890152610944565b9360018060a01b03811660a0870152818160a01c16151560c087015260a81c16151560e08501526101008401526101208301520390f35b5080fd5b91905034610225576020366003190112610225576001600160a01b03823581811693919290849003610221576101c8610b52565b831561020b5750506000548260018060a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b505034610190578160031936011261019057600a5490516001600160a01b039091168152602090f35b505034610190578160031936011261019057602090600d549051908152f35b82843461029657806003193601126102965750600c54600d5482519182526020820152f35b80fd5b90503461022557602036600319011261022557356001600160a01b038116908190036102255782829160209452600f845220549051908152f35b90503461022557602036600319011261022557356001600160a01b0381169081900361022557828291602094526010845220549051908152f35b505034610190578160031936011261019057602090600c549051908152f35b505034610190578160031936011261019057905490516001600160a01b039091168152602090f35b8284346102965780600319360112610296575061036f610bc1565b82519182526020820152f35b91905034610225578060031936011261022557813590811515928383036102215760248035938415610654576003544210156106235760ff60065460a01c166105ef579086929160018060a01b039182600954168651906323b872dd60e01b825233868301523083830152886044830152816064816020998a945af19081156105e5578a916105ab575b5015610578575087929190156104eb57600a5416803b156102255784516340c10f1960e01b81523392810192835260208301879052918391839182908490829060400103925af180156104e15790859392916104c8575b5050338652600f8152828620610473838254610b7e565b905561048182600c54610b7e565b600c555b61049182600e54610b7e565b600e5582519485528401528201527f740cf2efb8c5d89c163e271274fef112d5dd0c3784cc59bd724e10f643d5e01c60603392a280f35b6104d4919293506109b7565b610221578290853861045c565b84513d84823e3d90fd5b600b54169190823b156101905784516340c10f1960e01b8152339181019182526020820187905292839182908490829060400103925af1801561056e5761055b575b50829033865260108152828620610545838254610b7e565b905561055382600d54610b7e565b600d55610485565b946105678492966109b7565b949061052d565b83513d88823e3d90fd5b83600f6064928789519362461bcd60e51b85528401528201526e151c985b9cd9995c8819985a5b1959608a1b6044820152fd5b90508581813d83116105de575b6105c281836109cb565b810103126105da575180151581036105da5738610405565b8980fd5b503d6105b8565b87513d8c823e3d90fd5b50600f906020606494519362461bcd60e51b85528401528201526e13585c9ad95d081c995cdbdb1d9959608a1b6044820152fd5b50600c906020606494519362461bcd60e51b85528401528201526b13585c9ad95d08195b99195960a21b6044820152fd5b506012906020606494519362461bcd60e51b8552840152820152710416d6f756e74206d757374206265203e20360741b6044820152fd5b83346102965780600319360112610296576106a4610b52565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8391503461019057602036600319011261019057356001600160a01b03811690819003610190578152600f6020528180822054916010602052205482519182526020820152f35b50503461019057816003193601126101905760095490516001600160a01b039091168152602090f35b8391503461019057816003193601126101905782519061077482610984565b8282528260208301528284830152606080830152606060808301528260a08301528260c08301528260e083015261010090838284015283610120809401528451936107be85610984565b60ff6001541691808310156108ca57505083526002549360208401948552600354928185019384526107ee6109ed565b93606086019485526107fe610abb565b936080870194855260065460a0880196600160a01b60019003808316895260c08a01918360a01c60ff161515835260e08b019360a81c60ff161515845260075495858c0196875260085498888d01998a5280519d8e9d8e6020815260200190519061086891610921565b51908d01525160608c01525197610140988960808d01526101608c0161088d91610944565b90518b8203601f190160a08d01526108a59190610944565b98511660c08a015251151560e089015251151590870152519085015251908301520390f35b634e487b7160e01b825260219052602490fd5b505034610190578160031936011261019057602090600e549051908152f35b849034610190578160031936011261019057600b546001600160a01b03168152602090f35b90600482101561092e5752565b634e487b7160e01b600052602160045260246000fd5b919082519283825260005b848110610970575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161094f565b610140810190811067ffffffffffffffff8211176109a157604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116109a157604052565b90601f8019910116810190811067ffffffffffffffff8211176109a157604052565b60405190600060045490600182811c90808416938415610ab1575b6020948584108114610a9d5783885287949392918115610a7d5750600114610a3b575b5050610a39925003836109cb565b565b90939150600460005281600020936000915b818310610a65575050610a3993508201013880610a2b565b85548884018501529485019487945091830191610a4d565b915050610a3994925060ff191682840152151560051b8201013880610a2b565b634e487b7160e01b85526022600452602485fd5b91607f1691610a08565b60405190600060055490600182811c90808416938415610b48575b6020948584108114610a9d5783885287949392918115610a7d5750600114610b06575050610a39925003836109cb565b90939150600560005281600020936000915b818310610b30575050610a3993508201013880610a2b565b85548884018501529485019487945091830191610b18565b91607f1691610ad6565b6000546001600160a01b03163303610b6657565b60405163118cdaa760e01b8152336004820152602490fd5b91908201809211610b8b57565b634e487b7160e01b600052601160045260246000fd5b8115610bab570490565b634e487b7160e01b600052601260045260246000fd5b600c5490600d54610bd28184610b7e565b15610c2357610be18184610b7e565b671bc16d674ec800009182810290808204841490151715610b8b5781610c0691610ba1565b93828102928184041490151715610b8b57610c2091610ba1565b90565b50670de0b6b3a76400009150819056fea26469706673582212206a13c0f97bd5a40ed684602d84d75c4d4ef8de00985ce416ddaed29ceae522c764736f6c6343000814003360406080815234620003f75762000de3803803806200001e81620003fc565b9283398101608082820312620003f75781516001600160401b0390818111620003f757826200004f91850162000422565b926020928382015190838211620003f7576200006d91830162000422565b858201516001600160a01b03808216969293909291879003620003f75760600151938151818111620002f7576003908154906001948583811c93168015620003ec575b8a841014620003d6578190601f9384811162000380575b508a9084831160011462000319576000926200030d575b505060001982851b1c191690851b1782555b8551928311620002f75760049586548581811c91168015620002ec575b8a821014620002d7578281116200028c575b5088918411600114620002215793839491849260009562000215575b50501b92600019911b1c19161782555b8415620001fe57600580546001600160a01b0319811687179091558591167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360025490828201809211620001e9575060025560008381528083528481208054830190558451918252917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a35161094e9081620004958239f35b601190634e487b7160e01b6000525260246000fd5b8551631e4fbdf760e01b8152600081840152602490fd5b0151935038806200013b565b9190601f1984169287600052848a6000209460005b8c8983831062000274575050501062000259575b50505050811b0182556200014b565b01519060f884600019921b161c19169055388080806200024a565b86860151895590970196948501948893500162000236565b87600052896000208380870160051c8201928c8810620002cd575b0160051c019086905b828110620002c05750506200011f565b60008155018690620002b0565b92508192620002a7565b602288634e487b7160e01b6000525260246000fd5b90607f16906200010d565b634e487b7160e01b600052604160045260246000fd5b015190503880620000de565b60008681528c8120899550929190601f198516908e5b8282106200036857505084116200034f575b505050811b018255620000f0565b015160001983871b60f8161c1916905538808062000341565b8385015186558b979095019493840193018e6200032f565b909150846000528a6000208480850160051c8201928d8610620003cc575b918991869594930160051c01915b828110620003bc575050620000c7565b60008155859450899101620003ac565b925081926200039e565b634e487b7160e01b600052602260045260246000fd5b92607f1692620000b0565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002f757604052565b919080601f84011215620003f75782516001600160401b038111620002f75760209062000458601f8201601f19168301620003fc565b92818452828287010111620003f75760005b8181106200048057508260009394955001015290565b85810183015184820184015282016200046a56fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde03146106a557508063095ea7b3146105fc57806318160ddd146105dd57806323b872dd146104f8578063313ce567146104dc57806340c10f191461043f57806370a0823114610408578063715018a6146103a85780638da5cb5b1461037f57806395d89b411461027c5780639dc29fac146101c7578063a9059cbb14610196578063dd62ed3e146101495763f2fde38b146100bd57600080fd5b34610145576020366003190112610145576100d66107c6565b906100df6107f7565b6001600160a01b0391821692831561012f575050600580546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b505034610192578060031936011261019257806020926101676107c6565b61016f6107e1565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b5050346101925780600319360112610192576020906101c06101b66107c6565b6024359033610823565b5160018152f35b508290346101925782600319360112610192576101e26107c6565b90602435906101ef6107f7565b6001600160a01b038316928315610265578385528460205285852054918383106102465750508184956000805160206108f9833981519152936020938688528785520381872055816002540360025551908152a380f35b6102618484895194859463391434e360e21b865285016108da565b0390fd5b8551634b637e8f60e11b8152808301869052602490fd5b50919034610192578160031936011261019257805190828454600181811c90808316928315610375575b602093848410811461036257838852908115610346575060011461030e575b505050829003601f01601f191682019267ffffffffffffffff8411838510176102fb57508291826102f792528261077d565b0390f35b634e487b7160e01b815260418552602490fd5b919250868652828620918387935b83851061033257505050508301013880806102c5565b80548886018301529301928490820161031c565b60ff1916878501525050151560051b84010190503880806102c5565b634e487b7160e01b895260228a52602489fd5b91607f16916102a6565b50503461019257816003193601126101925760055490516001600160a01b039091168152602090f35b83346104055780600319360112610405576103c16107f7565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346101925760203660031901126101925760209181906001600160a01b036104306107c6565b16815280845220549051908152f35b5090346101455780600319360112610145576104596107c6565b90602435916104666107f7565b6001600160a01b03169283156104c757600254908382018092116104b4575084926000805160206108f98339815191529260209260025585855284835280852082815401905551908152a380f35b634e487b7160e01b865260119052602485fd5b84602492519163ec442f0560e01b8352820152fd5b5050346101925781600319360112610192576020905160128152f35b508234610405576060366003190112610405576105136107c6565b61051b6107e1565b916044359360018060a01b038316808352600160205286832033845260205286832054916000198303610557575b6020886101c0898989610823565b8683106105bf5781156105a8573315610591575082526001602090815286832033845281529186902090859003905582906101c087610549565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b9050610261868851938493637dc7a0d960e11b8552339085016108da565b5050346101925781600319360112610192576020906002549051908152f35b50346101455781600319360112610145576106156107c6565b60243590331561068e576001600160a01b031691821561067757508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849150833461014557826003193601126101455782600354600181811c90808316928315610773575b602093848410811461036257838852908115610757575060011461071e57505050829003601f01601f191682019267ffffffffffffffff8411838510176102fb57508291826102f792528261077d565b91925060038652828620918387935b83851061074357505050508301018580806102c5565b80548886018301529301928490820161072d565b60ff1916878501525050151560051b84010190508580806102c5565b91607f16916106ce565b6020808252825181830181905290939260005b8281106107b257505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610790565b600435906001600160a01b03821682036107dc57565b600080fd5b602435906001600160a01b03821682036107dc57565b6005546001600160a01b0316330361080b57565b60405163118cdaa760e01b8152336004820152602490fd5b916001600160a01b038084169283156108c157169283156108a8576000908382528160205260408220549083821061088b575091604082826000805160206108f9833981519152958760209652828652038282205586815220818154019055604051908152a3565b6102618460405193849363391434e360e21b8552600485016108da565b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b604091949392606082019560018060a01b031682526020820152015256feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220deccd82bc373edfe5e9b988bda4b10c5de0343f0b36d5c03a66e1f16ca4685d564736f6c63430008140033a26469706673582212202a7b3ec52e85717a700dd037f0e7f9537feeb02b2bef50e3ef9b9a9e90ec30bb64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PredictionFactoryTTrustSimple",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createTTrustMarket(uint8,uint256,uint256,string,string,uint256)": {
        "notice": "Create a new TTrust prediction market"
      },
      "getActiveMarkets(uint256,uint256)": {
        "notice": "Get active markets (simple pagination)"
      },
      "getMarketCount()": {
        "notice": "Get market count"
      },
      "setCreationFee(uint256)": {
        "notice": "Update fees"
      },
      "setTTrustPriceOracle(address)": {
        "notice": "Set oracle address"
      },
      "withdrawFees()": {
        "notice": "Withdraw collected fees"
      }
    },
    "notice": "Simplified factory contract for creating TTrust-based prediction markets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/PredictionFactoryTTrustSimple.sol:PredictionFactoryTTrustSimple",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 957,
        "contract": "contracts/PredictionFactoryTTrustSimple.sol:PredictionFactoryTTrustSimple",
        "label": "ttustPriceOracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(TTrustPriceOracle)2153"
      },
      {
        "astId": 960,
        "contract": "contracts/PredictionFactoryTTrustSimple.sol:PredictionFactoryTTrustSimple",
        "label": "allMarkets",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 962,
        "contract": "contracts/PredictionFactoryTTrustSimple.sol:PredictionFactoryTTrustSimple",
        "label": "marketCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 965,
        "contract": "contracts/PredictionFactoryTTrustSimple.sol:PredictionFactoryTTrustSimple",
        "label": "minimumLiquidity",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 968,
        "contract": "contracts/PredictionFactoryTTrustSimple.sol:PredictionFactoryTTrustSimple",
        "label": "creationFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(TTrustPriceOracle)2153": {
        "encoding": "inplace",
        "label": "contract TTrustPriceOracle",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}